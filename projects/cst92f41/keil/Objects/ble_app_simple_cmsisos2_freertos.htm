<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ble_app_simple_cmsisos2_freertos.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ble_app_simple_cmsisos2_freertos.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Mon Aug  4 09:15:21 2025
<BR><P>
<H3>Maximum Stack Usage =        960 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
shell_evt_handler &rArr; shell_main &rArr; list_commands &rArr; cs_printf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[209]">drv_pmu_select_32k</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[209]">drv_pmu_select_32k</a><BR>
 <LI><a href="#[a0]">drv_rcc_clock_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a0]">drv_rcc_clock_get</a><BR>
 <LI><a href="#[5b4]">drv_adc_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20a]">drv_adc_control</a><BR>
 <LI><a href="#[20a]">drv_adc_control</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20a]">drv_adc_control</a><BR>
 <LI><a href="#[34b]">drv_cpft_customer_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34c]">drv_cpft_init</a><BR>
 <LI><a href="#[10]">BT_WAKEUP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">BT_WAKEUP_IRQHandler</a><BR>
 <LI><a href="#[2a]">CC_INTR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">CC_INTR_IRQHandler</a><BR>
 <LI><a href="#[27]">CRY32M_RDY_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">CRY32M_RDY_IRQHandler</a><BR>
 <LI><a href="#[19]">EFUSE_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">EFUSE_IRQHandler</a><BR>
 <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[15]">PMU_POF_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">PMU_POF_IRQHandler</a><BR>
 <LI><a href="#[660]">vApplicationStackOverflowHook</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[660]">vApplicationStackOverflowHook</a><BR>
 <LI><a href="#[1e]">SOFT0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">SOFT0_IRQHandler</a><BR>
 <LI><a href="#[1f]">SOFT1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">SOFT1_IRQHandler</a><BR>
 <LI><a href="#[20]">SOFT2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">SOFT2_IRQHandler</a><BR>
 <LI><a href="#[21]">SOFT3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">SOFT3_IRQHandler</a><BR>
 <LI><a href="#[22]">SOFT4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">SOFT4_IRQHandler</a><BR>
 <LI><a href="#[23]">SOFT5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">SOFT5_IRQHandler</a><BR>
 <LI><a href="#[24]">SOFT6_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">SOFT6_IRQHandler</a><BR>
 <LI><a href="#[25]">SOFT7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">SOFT7_IRQHandler</a><BR>
 <LI><a href="#[13]">TIM_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">TIM_IRQHandler</a><BR>
 <LI><a href="#[26]">VTRACK_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">VTRACK_IRQHandler</a><BR>
 <LI><a href="#[565]">_etoa</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[568]">_ftoa</a><BR>
 <LI><a href="#[5a7]">cs_list_find</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a7]">cs_list_find</a><BR>
 <LI><a href="#[4c7]">ob_evt_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[324]">cs_bc_init</a><BR>
 <LI><a href="#[358]">ebh_fsm_check_trans_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[358]">ebh_fsm_check_trans_block</a><BR>
 <LI><a href="#[57d]">ancs_set_state</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57d]">ancs_set_state</a><BR>
 <LI><a href="#[d8]">[Anonymous Symbol]</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8]">[Anonymous Symbol]</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">[Anonymous Symbol]</a> from ebh_smp.o(.text) referenced 8 times from ebh_smp.o(.data)
 <LI><a href="#[a7]">[Anonymous Symbol]</a> from csble_gap_ext_adv_fsm.o(.text) referenced 134 times from csble_gap_ext_adv_fsm.o(.rodata)
 <LI><a href="#[35]">[Anonymous Symbol]</a> from bb.o(.text) referenced 73 times from bb.o(.text)
 <LI><a href="#[34]">$Super$$main</a> from main.o(.text.main) referenced from startup.o(.text)
 <LI><a href="#[1b]">ADC_IRQHandler</a> from drv_isr.o(.text.ADC_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[f]">BT_IRQHandler</a> from drv_isr.o(.text.BT_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[10]">BT_WAKEUP_IRQHandler</a> from drv_isr.o(.text.BT_WAKEUP_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from cmb_fault.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2a]">CC_INTR_IRQHandler</a> from drv_isr.o(.text.CC_INTR_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[27]">CRY32M_RDY_IRQHandler</a> from drv_isr.o(.text.CRY32M_RDY_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[14]">CS_24G_RF_IRQHandler</a> from drv_isr.o(.text.CS_24G_RF_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[11]">DMA_IRQHandler</a> from drv_isr.o(.text.DMA_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from drv_isr.o(.text.DebugMon_Handler) referenced from startup.o(RESET)
 <LI><a href="#[19]">EFUSE_IRQHandler</a> from drv_isr.o(.text.EFUSE_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1a]">GPIO_IRQHandler</a> from drv_isr.o(.text.GPIO_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from cmb_fault.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">I2C0_IRQHandler</a> from drv_isr.o(.text.I2C0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[31]">LP_TIMER_IRQHandler</a> from drv_isr.o(.text.LP_TIMER_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from cmb_fault.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from drv_isr.o(.text.NMI_Handler) referenced from startup.o(RESET)
 <LI><a href="#[12]">PIN_WAKEUP_IRQHandler</a> from drv_isr.o(.text.PIN_WAKEUP_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[15]">PMU_POF_IRQHandler</a> from drv_isr.o(.text.PMU_POF_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[16]">PMU_TIMER_IRQHandler</a> from drv_isr.o(.text.PMU_TIMER_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup.o(RESET)
 <LI><a href="#[2f]">RTC_1HZ_IRQHandler</a> from drv_isr.o(.text.RTC_1HZ_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[30]">RTC_AF_IRQHandler</a> from drv_isr.o(.text.RTC_AF_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">SF_IRQHandler</a> from drv_isr.o(.text.SF_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1e]">SOFT0_IRQHandler</a> from drv_isr.o(.text.SOFT0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1f]">SOFT1_IRQHandler</a> from drv_isr.o(.text.SOFT1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[20]">SOFT2_IRQHandler</a> from drv_isr.o(.text.SOFT2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[21]">SOFT3_IRQHandler</a> from drv_isr.o(.text.SOFT3_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[22]">SOFT4_IRQHandler</a> from drv_isr.o(.text.SOFT4_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[23]">SOFT5_IRQHandler</a> from drv_isr.o(.text.SOFT5_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[24]">SOFT6_IRQHandler</a> from drv_isr.o(.text.SOFT6_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[25]">SOFT7_IRQHandler</a> from drv_isr.o(.text.SOFT7_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[29]">SPI0_IRQHandler</a> from drv_isr.o(.text.SPI0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from drv_isr.o(.text.SPI1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup.o(RESET)
 <LI><a href="#[a]">SoftFault_Handler</a> from cmb_fault.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from drv_isr.o(.text.SysTick_Handler) referenced from startup.o(RESET)
 <LI><a href="#[2b]">TIM0_IRQHandler</a> from drv_isr.o(.text.TIM0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2c]">TIM1_IRQHandler</a> from drv_isr.o(.text.TIM1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2d]">TIM2_IRQHandler</a> from drv_isr.o(.text.TIM2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[13]">TIM_IRQHandler</a> from drv_isr.o(.text.TIM_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[97]">TimerCallback</a> from cmsis_os2.o(.text.TimerCallback) referenced from cmsis_os2.o(.text.osTimerNew)
 <LI><a href="#[28]">UART0_IRQHandler</a> from drv_isr.o(.text.UART0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[18]">UART1_IRQHandler</a> from drv_isr.o(.text.UART1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from cmb_fault.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">VTRACK_IRQHandler</a> from drv_isr.o(.text.VTRACK_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[17]">WDT_IRQHandler</a> from drv_isr.o(.text.WDT_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[33]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(.text)
 <LI><a href="#[8b]">_out_char</a> from cs_printf.o(.text._out_char) referenced from cs_printf.o(.text.cs_vprintf)
 <LI><a href="#[7f]">_out_null</a> from cs_printf.o(.text._out_null) referenced from cs_printf.o(.text._vsnprintf)
 <LI><a href="#[80]">ancs_event_cb</a> from ancs_client.o(.text.ancs_event_cb) referenced from ancs_client.o(.text.ancs_client_init)
 <LI><a href="#[81]">app_24g_ble_bb_frame_ongoing_handler</a> from app_24g.o(.text.app_24g_ble_bb_frame_ongoing_handler) referenced from app_24g.o(.text.app_24g_init)
 <LI><a href="#[84]">app_adv_event_cb</a> from app_adv.o(.text.app_adv_event_cb) referenced from app_adv.o(.text.app_adv_init)
 <LI><a href="#[87]">app_sec_event_cb</a> from app_sec.o(.text.app_sec_event_cb) referenced from app_sec.o(.text.app_sec_init)
 <LI><a href="#[17f]">bba_end_ind_handler</a> from llm_adv.o(.text) referenced from llm_task.o(.rodata)
 <LI><a href="#[12d]">bbb_acl_rx_ind_handler</a> from llc_hci.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[12e]">bbb_acl_tx_cfm_handler</a> from llc_hci.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[131]">bbb_ch_map_upd_cfm_handler</a> from llc_chmap_upd.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[12f]">bbb_disc_ind_handler</a> from llc_disconnect.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[12b]">bbb_llcp_rx_ind_handler</a> from llc_llcp.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[12c]">bbb_llcp_tx_cfm_handler</a> from llc_llcp.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[132]">bbb_phy_upd_cfm_handler</a> from llc_phy_upd.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[133]">bbc_estab_ind_handler</a> from llc_con_upd.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[134]">bbc_offset_upd_ind_handler</a> from llc_con_upd.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[130]">bbc_param_upd_cfm_handler</a> from llc_con_upd.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[180]">bbp_end_ind_handler</a> from llm_adv.o(.text) referenced from llm_task.o(.rodata)
 <LI><a href="#[17e]">bbs_req_ind_handler</a> from llm_adv.o(.text) referenced from llm_task.o(.rodata)
 <LI><a href="#[17d]">bbt_end_ind_handler</a> from llm_task.o(.text) referenced from llm_task.o(.rodata)
 <LI><a href="#[192]">chipsea_dfu_nvds_del_cfg</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_del_cfg) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[19c]">chipsea_dfu_nvds_del_dummy</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_del_dummy) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[188]">chipsea_dfu_nvds_del_mbr</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_del_mbr) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[193]">chipsea_dfu_nvds_disable_cfg</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_disable_cfg) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[19d]">chipsea_dfu_nvds_disable_dummy</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_disable_dummy) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[18e]">chipsea_dfu_nvds_disable_flash</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_disable_flash) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[198]">chipsea_dfu_nvds_disable_flash_ext</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_disable_flash_ext) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[189]">chipsea_dfu_nvds_disable_mbr</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_disable_mbr) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[18f]">chipsea_dfu_nvds_enable_cfg</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_enable_cfg) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[199]">chipsea_dfu_nvds_enable_dummy</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_enable_dummy) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[18a]">chipsea_dfu_nvds_enable_flash</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_enable_flash) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[194]">chipsea_dfu_nvds_enable_flash_ext</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_enable_flash_ext) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[185]">chipsea_dfu_nvds_enable_mbr</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_enable_mbr) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[18d]">chipsea_dfu_nvds_erase_flash</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_erase_flash) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[197]">chipsea_dfu_nvds_erase_flash_ext</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_erase_flash_ext) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[190]">chipsea_dfu_nvds_get_cfg</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_get_cfg) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[19a]">chipsea_dfu_nvds_get_dummy</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_get_dummy) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[18b]">chipsea_dfu_nvds_get_flash</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_get_flash) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[195]">chipsea_dfu_nvds_get_flash_ext</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_get_flash_ext) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[186]">chipsea_dfu_nvds_get_mbr</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_get_mbr) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[191]">chipsea_dfu_nvds_put_cfg</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_put_cfg) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[19b]">chipsea_dfu_nvds_put_dummy</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_put_dummy) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[18c]">chipsea_dfu_nvds_put_flash</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_put_flash) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[196]">chipsea_dfu_nvds_put_flash_ext</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_put_flash_ext) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[187]">chipsea_dfu_nvds_put_mbr</a> from chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_put_mbr) referenced from chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
 <LI><a href="#[19e]">cmd_mem32r</a> from shell_cmd.o(.text.cmd_mem32r) referenced from shell_cmd.o(.rodata.shell_cmd)
 <LI><a href="#[19f]">cmd_mem32w</a> from shell_cmd.o(.text.cmd_mem32w) referenced from shell_cmd.o(.rodata.shell_cmd)
 <LI><a href="#[83]">cs_24g_callback</a> from app_24g.o(.text.cs_24g_callback) referenced from app_24g.o(.text.app_24g_init)
 <LI><a href="#[89]">cs_24g_set_kdco</a> from drv_24g.o(.text.cs_24g_set_kdco) referenced from drv_24g.o(.text.cs_24g_set_deviation)
 <LI><a href="#[8a]">cs_ble_mem_heap_set</a> from ob_mem.o(.text) referenced from cs_ble_mem_heap.o(.text.cs_ble_mem_heap_init)
 <LI><a href="#[92]">cs_gatts_add_service</a> from csble_gatt.o(.text) referenced from service_common.o(.text.gatt_service_init)
 <LI><a href="#[86]">cs_log</a> from cs_log.o(.text.cs_log) referenced from app_sec.o(.text.app_sec_event_cb)
 <LI><a href="#[86]">cs_log</a> from cs_log.o(.text.cs_log) referenced from adapter.o(.text.chipsea_fault)
 <LI><a href="#[86]">cs_log</a> from cs_log.o(.text.cs_log) referenced from drv_24g.o(.text.cs_24g_control)
 <LI><a href="#[182]">dfu_begin_ind_handler</a> from service_chipsea_dfu.o(.text.dfu_begin_ind_handler) referenced from service_chipsea_dfu.o(.rodata.dfu_cb_itf)
 <LI><a href="#[184]">dfu_end_ind_handler</a> from service_chipsea_dfu.o(.text.dfu_end_ind_handler) referenced from service_chipsea_dfu.o(.rodata.dfu_cb_itf)
 <LI><a href="#[183]">dfu_prog_ind_handler</a> from service_chipsea_dfu.o(.text.dfu_prog_ind_handler) referenced from service_chipsea_dfu.o(.rodata.dfu_cb_itf)
 <LI><a href="#[93]">drv_gpio_isr_handler</a> from main.o(.text.drv_gpio_isr_handler) referenced from main.o(.text.main)
 <LI><a href="#[8f]">drv_pin_mux_set</a> from drv_pinmux.o(.text.drv_pin_mux_set) referenced from drv_sf_sys.o(.text.drv_sfs_probe)
 <LI><a href="#[94]">drv_pin_wakeup_isr_handler</a> from main.o(.text.drv_pin_wakeup_isr_handler) referenced from main.o(.text.main)
 <LI><a href="#[1a1]">drv_pmu_sleep_leave</a> from drv_pmu.o(RAM_CODE.PM) referenced from pm.o(RAM_CODE.PM)
 <LI><a href="#[a0]">drv_rcc_clock_get</a> from drv_rcc.o(.text.drv_rcc_clock_get) referenced from port.o(.text.vPortSetupTimerInterrupt)
 <LI><a href="#[8d]">drv_sf_read_fast_dma</a> from drv_sf.o(.text.drv_sf_read_fast_dma) referenced from drv_sf.o(.text.drv_sf_read)
 <LI><a href="#[8e]">drv_sf_read_fast_dual_dma</a> from drv_sf.o(.text.drv_sf_read_fast_dual_dma) referenced from drv_sf.o(.text.drv_sf_read)
 <LI><a href="#[8c]">drv_sf_read_fast_quad_dma</a> from drv_sf.o(.text.drv_sf_read_fast_quad_dma) referenced from drv_sf.o(.text.drv_sf_read)
 <LI><a href="#[4d]">ebh_mem_free</a> from ebh_port_memory.o(.text) referenced 3 times from csble_gap_conn.o(.text)
 <LI><a href="#[9e]">evt_timer_0_handler</a> from evt_task.o(.text.evt_timer_0_handler) referenced from evt_task.o(.text.vEvtScheduleTask)
 <LI><a href="#[90]">evt_timer_overflow_handler</a> from evt_timer.o(.text.evt_timer_overflow_handler) referenced from evt_timer.o(.text.evt_timer_init)
 <LI><a href="#[91]">evt_timer_sche</a> from evt_timer.o(.text.evt_timer_sche) referenced from evt_timer.o(.text.evt_timer_init)
 <LI><a href="#[12a]">hci_acl_data_handler</a> from llc_hci.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[129]">hci_command_handler</a> from llc_hci.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[100]">hci_disconnect_cmd_handler</a> from llc_disconnect.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[15c]">hci_le_clear_adv_sets_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[102]">hci_le_con_upd_cmd_handler</a> from llc_con_upd.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[107]">hci_le_ltk_req_neg_reply_cmd_handler</a> from llc_encrypt.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[106]">hci_le_ltk_req_reply_cmd_handler</a> from llc_encrypt.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[156]">hci_le_rd_adv_ch_tx_pw_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[103]">hci_le_rd_chnl_map_cmd_handler</a> from llc_chmap_upd.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[159]">hci_le_rd_max_adv_data_len_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[15a]">hci_le_rd_nb_supp_adv_sets_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[10b]">hci_le_rd_phy_cmd_handler</a> from llc_phy_upd.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[104]">hci_le_rd_rem_feats_cmd_handler</a> from llc_feat_exch.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[109]">hci_le_rem_con_param_req_neg_reply_cmd_handler</a> from llc_con_upd.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[108]">hci_le_rem_con_param_req_reply_cmd_handler</a> from llc_con_upd.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[15b]">hci_le_rmv_adv_set_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[153]">hci_le_set_adv_data_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[154]">hci_le_set_adv_en_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[152]">hci_le_set_adv_param_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[157]">hci_le_set_adv_set_rand_addr_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[10a]">hci_le_set_data_len_cmd_handler</a> from llc_dl_upd.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[143]">hci_le_set_ext_adv_data_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[141]">hci_le_set_ext_adv_en_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[142]">hci_le_set_ext_adv_param_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[158]">hci_le_set_ext_scan_rsp_data_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[15e]">hci_le_set_per_adv_data_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[15f]">hci_le_set_per_adv_en_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[15d]">hci_le_set_per_adv_param_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[10c]">hci_le_set_phy_cmd_handler</a> from llc_phy_upd.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[155]">hci_le_set_scan_rsp_data_cmd_handler</a> from llm_adv.o(.text) referenced from llm_hci.o(.rodata)
 <LI><a href="#[105]">hci_le_start_enc_cmd_handler</a> from llc_encrypt.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[101]">hci_rd_rem_ver_info_cmd_handler</a> from llc_ver_exch.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[110]">hci_rd_rssi_cmd_handler</a> from llc_hci.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[10f]">hci_rd_tx_pwr_lvl_cmd_handler</a> from llc_hci.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[10e]">hci_vs_set_pref_slave_evt_dur_cmd_handler</a> from llc_hci.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[10d]">hci_vs_set_pref_slave_latency_cmd_handler</a> from llc_hci.o(.text) referenced from llc_hci.o(.rodata)
 <LI><a href="#[e1]">l2cap_command_reject_rsp_proc</a> from ebh_l2cap_sig.o(.text) referenced from ebh_l2cap_sig.o(.rodata)
 <LI><a href="#[e2]">l2cap_connection_parameter_update_req_proc</a> from ebh_l2cap_sig.o(.text) referenced from ebh_l2cap_sig.o(.rodata)
 <LI><a href="#[e3]">l2cap_connection_parameter_update_rsp_proc</a> from ebh_l2cap_sig.o(.text) referenced from ebh_l2cap_sig.o(.rodata)
 <LI><a href="#[112]">ll_channel_map_ind_handler</a> from llc_chmap_upd.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[120]">ll_connection_param_req_handler</a> from llc_con_upd.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[121]">ll_connection_param_rsp_handler</a> from llc_con_upd.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[111]">ll_connection_update_ind_handler</a> from llc_con_upd.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[114]">ll_enc_req_handler</a> from llc_encrypt.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[115]">ll_enc_rsp_handler</a> from llc_encrypt.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[119]">ll_feature_req_handler</a> from llc_feat_exch.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[11a]">ll_feature_rsp_handler</a> from llc_feat_exch.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[123]">ll_length_req_handler</a> from llc_dl_upd.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[124]">ll_length_rsp_handler</a> from llc_dl_upd.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[128]">ll_min_used_channels_ind_handler</a> from llc_chmap_upd.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[11b]">ll_pause_enc_req_handler</a> from llc_encrypt.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[11c]">ll_pause_enc_rsp_handler</a> from llc_encrypt.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[125]">ll_phy_req_handler</a> from llc_phy_upd.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[126]">ll_phy_rsp_handler</a> from llc_phy_upd.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[127]">ll_phy_update_ind_handler</a> from llc_phy_upd.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[11f]">ll_slave_feature_req_handler</a> from llc_feat_exch.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[116]">ll_start_enc_req_handler</a> from llc_encrypt.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[117]">ll_start_enc_rsp_handler</a> from llc_encrypt.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[113]">ll_terminate_ind_handler</a> from llc_disconnect.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[11d]">ll_version_ind_handler</a> from llc_ver_exch.o(.text) referenced from llc_llcp.o(.rodata)
 <LI><a href="#[72]">llc_con_move_cbk</a> from llc_con_upd.o(.text) referenced from llm_adv.o(.text)
 <LI><a href="#[140]">llc_encrypt_ind_handler</a> from llc_encrypt.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[13c]">llc_op_ch_map_upd_ind_handler</a> from llc_chmap_upd.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[13a]">llc_op_con_upd_ind_handler</a> from llc_con_upd.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[138]">llc_op_disconnect_ind_handler</a> from llc_disconnect.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[13b]">llc_op_dl_upd_ind_handler</a> from llc_dl_upd.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[139]">llc_op_encrypt_ind_handler</a> from llc_encrypt.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[137]">llc_op_feats_exch_ind_handler</a> from llc_feat_exch.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[13d]">llc_op_phy_upd_ind_handler</a> from llc_phy_upd.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[136]">llc_op_ver_exch_ind_handler</a> from llc_ver_exch.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[135]">llc_stopped_ind_handler</a> from llc_disconnect.o(.text) referenced from llc_task.o(.rodata)
 <LI><a href="#[181]">llm_hci_command_handler</a> from llm_hci.o(.text) referenced from llm_task.o(.rodata)
 <LI><a href="#[32]">main</a> from startup.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[48]">ob_gap_hci_conn_param_reject_response_cb</a> from csble_gap.o(.text) referenced from csble_gap.o(.text)
 <LI><a href="#[47]">ob_gap_hci_conn_param_response_cb</a> from csble_gap.o(.text) referenced from csble_gap.o(.text)
 <LI><a href="#[46]">ob_gap_hci_conn_param_update_cb</a> from csble_gap.o(.text) referenced from csble_gap.o(.text)
 <LI><a href="#[59]">ob_gap_hci_read_bd_addr_cb</a> from csble_host_soc.o(.text) referenced from csble_host_soc.o(.text)
 <LI><a href="#[56]">ob_gap_hci_read_buf_size_v1_cb</a> from csble_host_soc.o(.text) referenced 2 times from csble_host_soc.o(.text)
 <LI><a href="#[45]">ob_gap_hci_set_addr_cb</a> from csble_gap.o(.text) referenced from csble_gap.o(.text)
 <LI><a href="#[5b]">ob_gap_hci_set_event_mask_cb</a> from csble_host_soc.o(.text) referenced from csble_host_soc.o(.text)
 <LI><a href="#[5a]">ob_gap_hci_set_le_event_mask_cb</a> from csble_host_soc.o(.text) referenced from csble_host_soc.o(.text)
 <LI><a href="#[49]">ob_pointer_expand</a> from csble.o(.text) referenced from csble_gap_conn.o(.text)
 <LI><a href="#[63]">obc_co_list_pool_init</a> from obc_co_list.o(.text) referenced from llb.o(.text)
 <LI><a href="#[73]">obc_schedule</a> from obc.o(.text) referenced from obc.o(.text)
 <LI><a href="#[1a0]">pm_sleep_notify</a> from pm.o(RAM_CODE.PM) referenced from pm.o(RAM_CODE.PM)
 <LI><a href="#[95]">pm_sleep_notify_handler</a> from main.o(.text.pm_sleep_notify_handler) referenced from main.o(.text.main)
 <LI><a href="#[a3]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[99]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[a6]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[85]">service_chipsea_dfu_evt_cb</a> from service_chipsea_dfu.o(.text.service_chipsea_dfu_evt_cb) referenced from service_chipsea_dfu.o(.text.app_chipsea_dfu_init)
 <LI><a href="#[9a]">service_discovery_event_cb</a> from service_common.o(.text.service_discovery_event_cb) referenced from service_common.o(.text.service_common_init)
 <LI><a href="#[9c]">shell_evt_handler</a> from shell_port.o(.text.shell_evt_handler) referenced from shell_port.o(.text.shell_init)
 <LI><a href="#[9b]">shell_out</a> from shell_port.o(.text.shell_out) referenced from shell.o(.text.shell_get_line)
 <LI><a href="#[9d]">shell_usart_cb</a> from shell_port.o(.text.shell_usart_cb) referenced from shell_port.o(.text.shell_init)
 <LI><a href="#[88]">strtoul</a> from strtoul.o(.text) referenced from shell_cmd.o(.text.cmd_mem32w)
 <LI><a href="#[82]">timer1_callback</a> from app_24g.o(.text.timer1_callback) referenced from app_24g.o(.text.app_24g_init)
 <LI><a href="#[a5]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced from event_groups.o(.text.xEventGroupSetBitsFromISR)
 <LI><a href="#[9f]">vEvtEventHandler</a> from evt_task.o(.text.vEvtEventHandler) referenced from evt_task.o(.text.vEvtScheduleTask)
 <LI><a href="#[a2]">vEvtScheduleTask</a> from evt_task.o(.text.vEvtScheduleTask) referenced from evt_task.o(.text.vStartEvtTask)
 <LI><a href="#[98]">vListInitialise</a> from list.o(.text.vListInitialise) referenced from tasks.o(.text.prvAddNewTaskToReadyList)
 <LI><a href="#[a1]">vSleepTimerOverflowHandler</a> from port.o(.text.vSleepTimerOverflowHandler) referenced from port.o(.text.vPortSetupTimerInterrupt)
 <LI><a href="#[96]">vTestTask</a> from main.o(.text.vTestTask) referenced from main.o(.text.main)
 <LI><a href="#[a4]">vTimerCallback</a> from main.o(.text.vTimerCallback) referenced from main.o(.text.vTestTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[201]"></a>rom_SystemEnterDeepSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_system_enter_deepsleep
</UL>

<P><STRONG><a name="[63c]"></a>rom_SystemFromRomExitDeepSleepEnable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[354]"></a>rom_drv_sf_wait_sr_no_busy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[205]"></a>rom_drv_sfb_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_config
</UL>

<P><STRONG><a name="[202]"></a>rom_drv_sfb_critical_object_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_begin
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_end
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3c2]"></a>rom_drv_sfb_critical_object_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitPostLib
</UL>

<P><STRONG><a name="[5ed]"></a>rom_drv_sfb_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_enable
</UL>

<P><STRONG><a name="[553]"></a>rom_drv_sfb_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_IRQHandler
</UL>

<P><STRONG><a name="[356]"></a>rom_drv_sfb_process_block</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_dma_ex
</UL>

<P><STRONG><a name="[355]"></a>rom_drv_sfb_process_nonblock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_dma_ex
</UL>

<P><STRONG><a name="[5f3]"></a>rom_drv_sfb_read_dma</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_fast_quad_dma
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_fast_dual_dma
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_fast_dma
</UL>

<P><STRONG><a name="[204]"></a>rom_drv_sfb_read_nodma</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_uid_ex
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_id
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_sr2
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_sr
</UL>

<P><STRONG><a name="[203]"></a>rom_drv_sfb_write_nodma</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol.symdefs(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_enable
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_resume
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_suspend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_end
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_deep_power_down_leave
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1bb]"></a>drv_sf_wait_sr_no_busy_with_suspend</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = drv_sf_wait_sr_no_busy_with_suspend &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_resume
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_suspend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_end
</UL>

<P><STRONG><a name="[1bc]"></a>drv_sf_wait_sr_no_busy</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_end
</UL>

<P><STRONG><a name="[1be]"></a>drv_sf_read_sr</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_read_nodma
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_sr_16bits
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_is_busy
</UL>

<P><STRONG><a name="[1bf]"></a>drv_sf_read_sr2</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_sf_read_sr2
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_read_nodma
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_is_suspended
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_sr_16bits
</UL>

<P><STRONG><a name="[1c0]"></a>drv_sf_is_suspended</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_sf.o(RAM_CODE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_sf_is_suspended &rArr; drv_sf_read_sr2
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_sr2
</UL>

<P><STRONG><a name="[1c1]"></a>drv_sf_is_busy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_wait_sr_no_busy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_wait_sr_no_busy_with_suspend
</UL>

<P><STRONG><a name="[1c8]"></a>drv_sf_suspend</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_sf_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_nodma
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_wait_sr_no_busy_with_suspend
</UL>

<P><STRONG><a name="[1c9]"></a>drv_sf_resume</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_sf_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_nodma
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_wait_sr_no_busy_with_suspend
</UL>

<P><STRONG><a name="[1ca]"></a>drv_sf_read_id</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_sf_read_id
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_read_nodma
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_id_safe
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_config
</UL>

<P><STRONG><a name="[1cb]"></a>drv_sf_read_id_safe</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_sf_read_id_safe &rArr; drv_sf_read_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_id
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_detect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_config
</UL>

<P><STRONG><a name="[1cc]"></a>drv_sf_config</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = drv_sf_config &rArr; drv_sf_quad_enable &rArr; drv_sf_write_sr_mask_16bits &rArr; drv_sf_write_sr_16bits &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_config
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_id_safe
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_id
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_quad_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_quad_bus_read_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_probe
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_iflash_delay_recalib
</UL>

<P><STRONG><a name="[1d9]"></a>drv_sf_iflash_delay_recalib</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, drv_sf.o(RAM_CODE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = drv_sf_iflash_delay_recalib &rArr; drv_sf_config &rArr; drv_sf_quad_enable &rArr; drv_sf_write_sr_mask_16bits &rArr; drv_sf_write_sr_16bits &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_xtal32m_x2_enable_and_switch
</UL>

<P><STRONG><a name="[1ce]"></a>drv_pmu_topclk_x2_enable</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, drv_pmu.o(RAM_CODE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = drv_pmu_topclk_x2_enable &rArr; drv_pmu_register_step_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_register_step_set
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_xtal32m_x2_enable_and_switch
</UL>

<P><STRONG><a name="[1cf]"></a>drv_pmu_register_step_set</STRONG> (Thumb, 268 bytes, Stack size 36 bytes, drv_pmu.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv_pmu_register_step_set
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_change_param
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_x2_enable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_voltage_temperature
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_init
</UL>

<P><STRONG><a name="[1d0]"></a>drv_pmu_topclk_switch_to_xtal32m_x2</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_pmu.o(RAM_CODE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_pmu_topclk_switch_to_xtal32m_x2
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_xtal32m_x2_enable_and_switch
</UL>

<P><STRONG><a name="[1b3]"></a>cs_24g_switch_role</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, drv_24g.o(RAM_CODE.24G))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cs_24g_switch_role
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_write_int
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_control
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_read_int
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_callback
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_write
</UL>

<P><STRONG><a name="[1b5]"></a>cs_24g_write</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_24g.o(RAM_CODE.24G), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cs_24g_write &rArr; cs_24g_switch_role
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_switch_role
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_write_tx_payload
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_ce_high_pulse
</UL>

<P><STRONG><a name="[1b6]"></a>cs_24g_write_int</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_24g.o(RAM_CODE.24G), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cs_24g_write_int &rArr; cs_24g_switch_role
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_switch_role
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_write_tx_payload
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_ce_high_pulse
</UL>

<P><STRONG><a name="[1b7]"></a>cs_24g_read</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, drv_24g.o(RAM_CODE.24G), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cs_24g_read &rArr; cs_24g_switch_role
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_switch_role
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_read_rx_payload_width
</UL>

<P><STRONG><a name="[1b8]"></a>cs_24g_read_int</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_24g.o(RAM_CODE.24G))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cs_24g_read_int &rArr; cs_24g_switch_role
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_switch_role
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_24g_ble_bb_frame_ongoing_handler
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_24g_init
</UL>

<P><STRONG><a name="[1b9]"></a>drv_cs_24g_isr</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, drv_24g.o(RAM_CODE.24G))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_cs_24g_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_read_rx_payload_width
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_24G_RF_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>evt_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, evt.o(RAM_CODE.PM))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_overflow_handler
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_hw_prog
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_usart_cb
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
</UL>

<P><STRONG><a name="[1a8]"></a>evt_clear</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, evt.o(RAM_CODE.PM))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_sche
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_evt_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_schedule
</UL>

<P><STRONG><a name="[1a9]"></a>evt_get_all</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evt.o(RAM_CODE.PM), UNUSED, KEPT)

<P><STRONG><a name="[1aa]"></a>evt_schedule</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, evt.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[1ad]"></a>pm_sleep</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, pm.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pm_sleep &rArr; pm_sleep_enter_light_sleep &rArr; pm_sleep_enter_common_sleep &rArr; drv_pmu_sleep_enter &rArr; drv_pmu_32k_switch_to_rc &rArr; drv_calib_rc32k &rArr; drv_calib_rc32k_fast &rArr; drv_calib_rc32k_accuracy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_enter_light_sleep
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_enter_common_sleep
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_notify
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_sleep_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_power_manage
</UL>

<P><STRONG><a name="[1ae]"></a>pm_sleep_min_time_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pm.o(RAM_CODE.PM), UNUSED, KEPT)

<P><STRONG><a name="[1af]"></a>pm_sleep_check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pm_sleep_check &rArr; pm_sleep_checker_check &rArr; drv_pmu_sleep_status &rArr; drv_pmu_gpio_lowpower_is_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_state_check
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_checker_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_power_manage
</UL>

<P><STRONG><a name="[1b0]"></a>pm_power_manage</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pm.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pm_power_manage &rArr; pm_sleep &rArr; pm_sleep_enter_light_sleep &rArr; pm_sleep_enter_common_sleep &rArr; drv_pmu_sleep_enter &rArr; drv_pmu_32k_switch_to_rc &rArr; drv_calib_rc32k &rArr; drv_calib_rc32k_fast &rArr; drv_calib_rc32k_accuracy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_check
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[1b1]"></a>drv_pmu_timer_left_time_get</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, drv_pmu_timer.o(RAM_CODE.PM), UNUSED, KEPT)

<P><STRONG><a name="[1d1]"></a>drv_pmu_topclk_rc32m_power_enable</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, drv_pmu.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_pmu_topclk_rc32m_power_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_sleep_leave
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rng_get
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_init
</UL>

<P><STRONG><a name="[1d3]"></a>drv_pmu_select_32k_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_pmu.o(RAM_CODE.PM))
<BR><BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rng_get
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rc32k_temperature_check
</UL>

<P><STRONG><a name="[1d4]"></a>drv_pmu_sleep_status</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_pmu.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_pmu_sleep_status &rArr; drv_pmu_gpio_lowpower_is_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_gpio_lowpower_is_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_checker_check
</UL>

<P><STRONG><a name="[1d5]"></a>drv_pmu_sleep_enter</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, drv_pmu.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_pmu_sleep_enter &rArr; drv_pmu_32k_switch_to_rc &rArr; drv_calib_rc32k &rArr; drv_calib_rc32k_fast &rArr; drv_calib_rc32k_accuracy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_wakeup_pin_wait_idle
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_32k_switch_to_rc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_enter_common_sleep
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
</UL>

<P><STRONG><a name="[1a1]"></a>drv_pmu_sleep_leave</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, drv_pmu.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = drv_pmu_sleep_leave &rArr; drv_pmu_select_32k &rArr;  drv_pmu_select_32k (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_xtal32m_wait_ready
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_rc32m_power_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(RAM_CODE.PM)
</UL>
<P><STRONG><a name="[1d6]"></a>drv_pmu_ana_enable</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, drv_pmu.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_pmu_ana_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_control
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rc32k
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_bb_frame_ongoing
</UL>

<P><STRONG><a name="[1d7]"></a>drv_calib_rf_restore</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, drv_calib.o(RAM_CODE.PM))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_patch
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_pm_sleep_store_restore_handler
</UL>

<P><STRONG><a name="[1d8]"></a>drv_calib_sys_restore</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_calib.o(RAM_CODE.PM), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_pm_sleep_store_restore_handler
</UL>

<P><STRONG><a name="[33]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[67f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[20f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[511]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[680]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[681]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[682]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[683]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[684]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reset_Handler &rArr; SystemInit &rArr; drv_gpio_init &rArr; drv_gpio_set_trig
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = main &rArr; SystemInitPost &rArr; SystemInitPostLib &rArr; drv_cpft_uninit &rArr; drv_adc_control &rArr;  drv_adc_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; chipsea_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemManage_Handler &rArr; chipsea_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BusFault_Handler &rArr; chipsea_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsageFault_Handler &rArr; chipsea_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SoftFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SoftFault_Handler &rArr; chipsea_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[214]"></a>ble_init</STRONG> (Thumb, 532 bytes, Stack size 80 bytes, auth_keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_init &rArr; cs_ble_init &rArr; cs_bc_init &rArr; obc_reset &rArr; bbb_init &rArr; bbc_init &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_uid_ex
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_set
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[21a]"></a>bb_init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, bb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bb_init &rArr; pm_sleep_checker_callback_register
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_store_restore_callback_register
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_checker_callback_register
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
</UL>

<P><STRONG><a name="[237]"></a>bba_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bba_init &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
</UL>

<P><STRONG><a name="[238]"></a>bba_start</STRONG> (Thumb, 1484 bytes, Stack size 48 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bba_start &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_fg_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_duration_update
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
</UL>

<P><STRONG><a name="[23d]"></a>bba_duration_update</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
</UL>

<P><STRONG><a name="[23f]"></a>bba_stop</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bba_stop &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
</UL>

<P><STRONG><a name="[240]"></a>bba_adv_data_update</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bba_adv_data_update &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_data_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[241]"></a>bba_scan_rsp_data_update</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bba_scan_rsp_data_update &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_scan_rsp_data_cmd_handler
</UL>

<P><STRONG><a name="[242]"></a>bba_new_data_release</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bba_new_data_release &rArr; llb_adv_tx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_scan_rsp_data_cmd_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[48e]"></a>bba_rand_addr_update</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bba_rand_addr_update
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_set_rand_addr_cmd_handler
</UL>

<P><STRONG><a name="[492]"></a>bba_restart</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bba_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
</UL>

<P><STRONG><a name="[494]"></a>bba_sync_info_update</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bba_sync_info_update
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_en_cmd_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
</UL>

<P><STRONG><a name="[246]"></a>bbb_rxdesc_reset</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, bb_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bbb_rxdesc_reset &rArr; llb_rx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_alloc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_sw_half_reset
</UL>

<P><STRONG><a name="[1dd]"></a>bbb_rxdesc_free</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, bb_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bbb_rxdesc_free &rArr; llb_rx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1de]"></a>bbb_rxdesc_check</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bb_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbb_rxdesc_check
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1df]"></a>bbb_channel_assess</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bb_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbb_channel_assess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1e0]"></a>bbb_read_clock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bb_base.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_time_32k_get
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_start
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_llcp_tx
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_tx
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_flow_set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ch_map_update
</UL>

<P><STRONG><a name="[249]"></a>bbb_init</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, bb_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bbb_init &rArr; bbc_init &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_alloc
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[47f]"></a>bbb_ch_assess_data_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bb_base.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ch_map_update
</UL>

<P><STRONG><a name="[47c]"></a>bbb_white_list_add</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bb_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbb_white_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_link_disc
</UL>

<P><STRONG><a name="[24e]"></a>bbb_white_list_rem</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bb_base.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_end_ind_handler
</UL>

<P><STRONG><a name="[250]"></a>bbb_aa_gen</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bb_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bbb_aa_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
</UL>

<P><STRONG><a name="[480]"></a>bbb_ch_map_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bb_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbb_ch_map_set
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ch_map_update
</UL>

<P><STRONG><a name="[223]"></a>bbb_ch_idx_get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bb_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbb_ch_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[25c]"></a>bbc_start</STRONG> (Thumb, 908 bytes, Stack size 56 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bbc_start &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_per_add
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_clk_add_bs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
</UL>

<P><STRONG><a name="[25f]"></a>bbc_stop</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bbc_stop &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_disconnect
</UL>

<P><STRONG><a name="[260]"></a>bbc_llcp_tx</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_tx_check
</UL>

<P><STRONG><a name="[263]"></a>bbc_data_tx</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bbc_data_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler
</UL>

<P><STRONG><a name="[265]"></a>bbc_data_flow_set</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bbc_data_flow_set &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[421]"></a>bbc_param_update</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bbc_param_update
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[40e]"></a>bbc_ch_map_update</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbc_ch_map_update
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[267]"></a>bbc_data_len_update</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bbc_data_len_update &rArr; [Anonymous Symbol] &rArr; obc_llt_params_current_per_add &rArr; obc_llt_params_current_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_length_req_handler
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[269]"></a>bbc_phys_update</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bbc_phys_update &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[419]"></a>bbc_tx_len_update_for_intv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[26a]"></a>bbc_tx_len_update_for_rate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bbc_tx_len_update_for_rate &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[413]"></a>bbc_event_counter_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[42d]"></a>bbc_activity_offset_compute</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bbc_activity_offset_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[26b]"></a>bbc_tx_enc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbc_tx_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[26d]"></a>bbc_rx_enc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbc_rx_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[459]"></a>bbc_enc_key_load</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bbc_enc_key_load
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[26e]"></a>bbc_current_tx_power_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbc_current_tx_power_get
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_tx_pwr_lvl_cmd_handler
</UL>

<P><STRONG><a name="[462]"></a>bbc_rssi_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_handler
</UL>

<P><STRONG><a name="[429]"></a>bbc_offset_get</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[464]"></a>bbc_pref_slave_latency_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_set_pref_slave_latency_cmd_handler
</UL>

<P><STRONG><a name="[26f]"></a>bbc_pref_slave_evt_dur_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bbc_pref_slave_evt_dur_set &rArr; [Anonymous Symbol] &rArr; obc_llt_params_current_per_add &rArr; obc_llt_params_current_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_set_pref_slave_evt_dur_cmd_handler
</UL>

<P><STRONG><a name="[24d]"></a>bbc_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bbc_init &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
</UL>

<P><STRONG><a name="[24b]"></a>bbp_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bbp_init &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
</UL>

<P><STRONG><a name="[271]"></a>bbp_start</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bbp_start &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_aa_gen
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_en_cmd_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
</UL>

<P><STRONG><a name="[278]"></a>bbp_stop</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bbp_stop &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_en_cmd_handler
</UL>

<P><STRONG><a name="[27b]"></a>bbp_data_update</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bbp_data_update &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[27d]"></a>bbp_new_data_release</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bbp_new_data_release &rArr; llb_adv_tx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[224]"></a>bbp_sync_info_get</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbp_sync_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[243]"></a>bbp_init_info_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[481]"></a>bbp_ch_map_update</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bb_padv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ch_map_update
</UL>

<P><STRONG><a name="[280]"></a>bbt_start</STRONG> (Thumb, 792 bytes, Stack size 296 bytes, bb_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = bbt_start &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_alloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[285]"></a>bbt_stop</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, bb_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bbt_stop &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_free
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[24c]"></a>bbt_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bb_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bbt_init &rArr; [Anonymous Symbol] &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
</UL>

<P><STRONG><a name="[49]"></a>ob_pointer_expand</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, csble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ob_pointer_expand &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_conn.o(.text)
</UL>
<P><STRONG><a name="[288]"></a>cs_event_callback_reg</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, csble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cs_event_callback_reg &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_client_init
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_chipsea_dfu_init
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_common_init
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_init
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_init
</UL>

<P><STRONG><a name="[2a0]"></a>ob_event_trigger_adapt</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, csble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_write_req
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_read_req
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_prepare_write_req
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_write_rsp
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_read_rsp
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_read_by_uuid_rsp
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_hvx_ind
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_rsp
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_by_uuid_rsp
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_desc_rsp
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_char_rsp
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_security_request
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_pin_request
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_pairing_request
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_ltk_request
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_encrypted
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_bonded
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_bond_ltk_request
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_bond_irk_request
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_hci_le_evt_adapt
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_state_proc
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_evt_adapt
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_request_recv_evt_adapt
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_power_changed_evt_adapt
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_phy_update_evt_adapt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_error_evt_adapt
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_data_length_changed_evt_adapt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_update_request_evt_adapt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_params_update_evt_adapt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[45]"></a>ob_gap_hci_set_addr_cb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ob_gap_hci_set_addr_cb &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap.o(.text)
</UL>
<P><STRONG><a name="[219]"></a>cs_gap_addr_set</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cs_gap_addr_set &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_public_address_set
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[28c]"></a>cs_gap_addr_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cs_gap_addr_get &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_public_address_get
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_starting_state_proc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_le_evt_adapt
</UL>

<P><STRONG><a name="[46]"></a>ob_gap_hci_conn_param_update_cb</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ob_gap_hci_conn_param_update_cb &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap.o(.text)
</UL>
<P><STRONG><a name="[291]"></a>ob_gap_conn_param_request</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ob_gap_conn_param_request &rArr; ebh_l2cap_conn_parameters_update_request &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_role_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_handle_get
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_conn_parameters_update_request
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_conn_param_update
</UL>

<P><STRONG><a name="[297]"></a>cs_gap_conn_param_update</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cs_gap_conn_param_update &rArr; ob_gap_conn_param_request &rArr; ebh_l2cap_conn_parameters_update_request &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_chipsea_dfu_update_start_ind_handler
</UL>

<P><STRONG><a name="[298]"></a>cs_gap_get_encrypt_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs_gap_get_encrypt_state &rArr; ebh_gatt_sec_lvl_get &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_sec_lvl_get
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_set_state
</UL>

<P><STRONG><a name="[29a]"></a>ob_gap_create</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ob_gap_create &rArr; ob_gap_adv_init &rArr; ob_ext_adv_fsm_init &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
</UL>

<P><STRONG><a name="[29e]"></a>ob_gap_power_changed_evt_adapt</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_power_changed_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2a1]"></a>ob_gap_phy_update_evt_adapt</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_phy_update_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2a2]"></a>ob_gap_data_length_changed_evt_adapt</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_data_length_changed_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2a4]"></a>ob_gap_conn_params_update_evt_adapt</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_conn_params_update_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[47]"></a>ob_gap_hci_conn_param_response_cb</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ob_gap_hci_conn_param_response_cb &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>ob_gap_hci_conn_param_reject_response_cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ob_gap_hci_conn_param_reject_response_cb &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap.o(.text)
</UL>
<P><STRONG><a name="[2a5]"></a>ob_gap_conn_update_request_evt_adapt</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_conn_update_request_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_conn_param_update_request_event
</UL>

<P><STRONG><a name="[2a7]"></a>ob_gap_conn_param_update_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request_req_adapt
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_conn_param_update_check_event
</UL>

<P><STRONG><a name="[2a6]"></a>ob_gap_conn_param_request_req_adapt</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_conn_param_request_req_adapt &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_update_check
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2a9]"></a>ebh_l2cap_conn_param_update_check_event</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ebh_l2cap_conn_param_update_check_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_update_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_connection_parameter_update_req_proc
</UL>

<P><STRONG><a name="[2aa]"></a>ebh_l2cap_conn_param_update_request_event</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ebh_l2cap_conn_param_update_request_event &rArr; ob_gap_conn_update_request_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_role_get
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_update_request_evt_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_connection_parameter_update_req_proc
</UL>

<P><STRONG><a name="[2ab]"></a>ob_gap_hci_device_info_hci_cmp_adapt</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_hci_device_info_hci_cmp_adapt &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2ad]"></a>ob_gap_hci_device_info_hci_evt_adapt</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_hci_device_info_hci_evt_adapt &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2ae]"></a>ob_gap_scan_request_recv_evt_adapt</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ob_gap_scan_request_recv_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2af]"></a>ob_gap_hci_device_info_le_evt_adapt</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_hci_device_info_le_evt_adapt &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2b0]"></a>ob_gap_hci_error_evt_adapt</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_hci_error_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2b1]"></a>ob_gap_conn_idx_get</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ob_gap_conn_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_connected_event
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_evt_adapt
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[292]"></a>ob_gap_conn_handle_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, csble_gap_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_rsponse_cb_port
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_request_cb_port
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request
</UL>

<P><STRONG><a name="[293]"></a>ob_gap_conn_role_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, csble_gap_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_conn_param_update_request_event
</UL>

<P><STRONG><a name="[2b6]"></a>ob_gap_disconnect_by_handle</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ob_gap_disconnect_by_handle &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_le_evt_adapt
</UL>

<P><STRONG><a name="[2b8]"></a>cs_gap_disconnect</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cs_gap_disconnect &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_chipsea_dfu_update_end_ind_handler
</UL>

<P><STRONG><a name="[2b9]"></a>ob_gap_conn_deinit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ob_gap_conn_deinit &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_init
</UL>

<P><STRONG><a name="[29b]"></a>ob_gap_conn_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ob_gap_conn_init &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_deinit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_create
</UL>

<P><STRONG><a name="[2ba]"></a>ob_gap_conn_hci_evt_adapt</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_conn_hci_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2bb]"></a>ob_gap_conn_hci_le_evt_adapt</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ob_gap_conn_hci_le_evt_adapt &rArr; ob_gap_disconnect_by_handle &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_get
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_connected_event
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_ext_adv_addr_get
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_disconnect_by_handle
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2c0]"></a>ob_gap_conn_hci_cmp_adapt</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ob_gap_conn_hci_cmp_adapt &rArr; [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2c1]"></a>ob_gap_conn_reset_cmp_adapt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ob_gap_conn_reset_cmp_adapt &rArr; [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2c2]"></a>ob_adv_msg_sche_adapt</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ob_adv_msg_sche_adapt &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2c7]"></a>cs_gap_adv_start</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cs_gap_adv_start &rArr; [Anonymous Symbol] &rArr; ob_pointer_expand &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_adv_msg_sche_trigger_port
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_init
</UL>

<P><STRONG><a name="[2bd]"></a>ob_gap_ext_adv_addr_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_le_evt_adapt
</UL>

<P><STRONG><a name="[29d]"></a>ob_gap_adv_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ob_gap_adv_init &rArr; ob_ext_adv_fsm_init &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_fsm_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_deinit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_create
</UL>

<P><STRONG><a name="[2cb]"></a>ob_gap_adv_deinit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ob_gap_adv_deinit &rArr; [Anonymous Symbol] &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_fsm_deinit
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_init
</UL>

<P><STRONG><a name="[2ce]"></a>ob_gap_adv_hci_le_evt_adapt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ob_gap_adv_hci_le_evt_adapt &rArr; [Anonymous Symbol] &rArr; ob_pointer_expand &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_adv_msg_sche_trigger_port
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2cf]"></a>ob_gap_adv_hci_cmp_adapt</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ob_gap_adv_hci_cmp_adapt &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2d3]"></a>ob_gap_adv_reset_cmp_adapt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_adv_msg_sche_trigger_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2d4]"></a>ob_ext_adv_stopping_state_proc</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ob_ext_adv_stopping_state_proc &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2d7]"></a>ob_ext_adv_starting_state_proc</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ob_ext_adv_starting_state_proc &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_get
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2db]"></a>ob_ext_adv_updating_state_proc</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ob_ext_adv_updating_state_proc &rArr; [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2dc]"></a>ob_ext_adv_state_proc</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ob_ext_adv_state_proc &rArr; [Anonymous Symbol] &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_adv_msg_sche_trigger_port
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2cc]"></a>ob_ext_adv_fsm_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ob_ext_adv_fsm_init &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_reset
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_fsm_deinit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_init
</UL>

<P><STRONG><a name="[2cd]"></a>ob_ext_adv_fsm_deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ob_ext_adv_fsm_deinit &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_fsm_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_deinit
</UL>

<P><STRONG><a name="[2df]"></a>ob_gap_scan_deinit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, csble_gap_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ob_gap_scan_deinit &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_init
</UL>

<P><STRONG><a name="[29c]"></a>ob_gap_scan_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, csble_gap_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ob_gap_scan_init &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_deinit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_create
</UL>

<P><STRONG><a name="[2e1]"></a>ob_gap_scan_hci_le_evt_adapt</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, csble_gap_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ob_gap_scan_hci_le_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2e2]"></a>ob_gap_scan_hci_cmp_adapt</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, csble_gap_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ob_gap_scan_hci_cmp_adapt &rArr; [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2e3]"></a>ob_gap_scan_reset_cmp_adapt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, csble_gap_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ob_gap_scan_reset_cmp_adapt &rArr; [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2e4]"></a>ebh_smp_evt_encrypted</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_evt_encrypted &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_encrypt_changed_adapt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[2e5]"></a>ebh_smp_evt_pairing_request</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_evt_pairing_request &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_state_proc
</UL>

<P><STRONG><a name="[2e6]"></a>ebh_smp_ltk_rsponse_cb_port</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ebh_smp_ltk_rsponse_cb_port &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_handle_get
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_request_adapt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_enc_ltk_response
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_state_proc
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2e7]"></a>ebh_smp_ltk_request_cb_port</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ebh_smp_ltk_request_cb_port &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_handle_get
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_state_proc
</UL>

<P><STRONG><a name="[2e8]"></a>ebh_smp_evt_pin_request</STRONG> (Thumb, 76 bytes, Stack size 88 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ebh_smp_evt_pin_request &rArr; ebh_smp_pin_response &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pin_response
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_opt_cfg_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2ea]"></a>cs_gap_pin_response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cs_gap_pin_response &rArr; ebh_smp_pin_response &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pin_response
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
</UL>

<P><STRONG><a name="[2eb]"></a>ebh_smp_evt_ltk_request</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_evt_ltk_request &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_state_proc
</UL>

<P><STRONG><a name="[2ec]"></a>ebh_smp_evt_bond_ltk_request</STRONG> (Thumb, 20 bytes, Stack size 48 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_evt_bond_ltk_request &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2ee]"></a>ebh_smp_evt_bond_irk_request</STRONG> (Thumb, 20 bytes, Stack size 48 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_evt_bond_irk_request &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2ef]"></a>ebh_smp_evt_bonded</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2f0]"></a>ebh_smp_evt_ltk_info_response</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_evt_ltk_info_response &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2f2]"></a>ebh_smp_evt_irk_info_response</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_evt_irk_info_response &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2f3]"></a>ebh_smp_evt_security_request</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_evt_security_request &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2f4]"></a>cs_gap_ltk_response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cs_gap_ltk_response &rArr; ebh_smp_enc_ltk_response &rArr; ebh_smp_ltk_rsponse_cb_port &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_enc_ltk_response
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
</UL>

<P><STRONG><a name="[2f6]"></a>cs_gap_bond_info_response</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cs_gap_bond_info_response &rArr; ebh_smp_bond_irk_response &rArr; [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_ltk_response
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_irk_response
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
</UL>

<P><STRONG><a name="[2f9]"></a>cs_gap_pairing_response</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cs_gap_pairing_response &rArr; ebh_smp_pairing_response &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pairing_response
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
</UL>

<P><STRONG><a name="[92]"></a>cs_gatts_add_service</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cs_gatts_add_service &rArr; ebh_gatts_add_service &rArr; ebh_att_db_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_clear_service
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_chipsea_dfu_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_common.o(.text.gatt_service_init)
</UL>
<P><STRONG><a name="[2fe]"></a>cs_gatts_send_hvx</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cs_gatts_send_hvx &rArr; ebh_gatts_send_hvx &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_send_hvx
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_level_report
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_chipsea_dfu_evt_cb
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_response
</UL>

<P><STRONG><a name="[300]"></a>cs_gatts_read_response</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cs_gatts_read_response &rArr; ebh_gatts_read_response &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_discovery_event_cb
</UL>

<P><STRONG><a name="[302]"></a>cs_gattc_find_service_by_uuid</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cs_gattc_find_service_by_uuid &rArr; ebh_gattc_find_service_by_uuid &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_find_service_by_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_set_state
</UL>

<P><STRONG><a name="[304]"></a>cs_gattc_write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cs_gattc_write &rArr; ebh_gattc_write &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_get_pending_data
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;req_perform
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_set_state
</UL>

<P><STRONG><a name="[306]"></a>ebh_gatt_evt_tx_complete</STRONG> (Thumb, 22 bytes, Stack size 40 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ebh_gatt_evt_tx_complete &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_done_adapt
</UL>

<P><STRONG><a name="[309]"></a>ebh_gatt_evt_mtu_exchanged</STRONG> (Thumb, 22 bytes, Stack size 40 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ebh_gatt_evt_mtu_exchanged &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[30a]"></a>ebh_gatts_evt_indicate_cfm</STRONG> (Thumb, 22 bytes, Stack size 40 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ebh_gatts_evt_indicate_cfm &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[30b]"></a>ebh_gatts_evt_read_req</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ebh_gatts_evt_read_req &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[30d]"></a>ebh_gatts_evt_write_req</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_gatts_evt_write_req &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[30f]"></a>ebh_gatts_evt_prepare_write_req</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ebh_gatts_evt_prepare_write_req &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[310]"></a>ebh_gattc_evt_find_serv_rsp</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ebh_gattc_evt_find_serv_rsp &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[313]"></a>ebh_gattc_evt_find_serv_by_uuid_rsp</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ebh_gattc_evt_find_serv_by_uuid_rsp &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[316]"></a>ebh_gattc_evt_find_char_rsp</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ebh_gattc_evt_find_char_rsp &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[317]"></a>ebh_gattc_evt_find_desc_rsp</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ebh_gattc_evt_find_desc_rsp &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[318]"></a>ebh_gattc_evt_read_rsp</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ebh_gattc_evt_read_rsp &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[319]"></a>ebh_gattc_evt_read_by_uuid_rsp</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ebh_gattc_evt_read_by_uuid_rsp &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[31a]"></a>ebh_gattc_evt_write_rsp</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ebh_gattc_evt_write_rsp &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[31b]"></a>ebh_gattc_evt_hvx_ind</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_gattc_evt_hvx_ind &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2c9]"></a>ob_adv_msg_sche_trigger_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csble_host_soc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_adv_start
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_reset_cmp_adapt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_hci_le_evt_adapt
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_state_proc
</UL>

<P><STRONG><a name="[56]"></a>ob_gap_hci_read_buf_size_v1_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ob_gap_hci_read_buf_size_v1_cb &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 2]<UL><LI> csble_host_soc.o(.text)
<LI> csble_host_soc.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>ob_gap_hci_set_le_event_mask_cb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ob_gap_hci_set_le_event_mask_cb &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>ob_gap_hci_set_event_mask_cb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ob_gap_hci_set_event_mask_cb &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>ob_gap_hci_read_bd_addr_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ob_gap_hci_read_bd_addr_cb &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.text)
</UL>
<P><STRONG><a name="[2be]"></a>ob_gap_conn_connected_event</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ob_gap_conn_connected_event &rArr; ebh_l2cap_connected_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_connected_adapt
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_le_evt_adapt
</UL>

<P><STRONG><a name="[31d]"></a>ebh_smp_send_cb_port</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ebh_smp_send_cb_port &rArr; ebh_l2cap_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pairing_response
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_ltk_response
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_irk_response
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_st_send_random
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_state_proc
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[31f]"></a>ebh_gatt_send_cb_port</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ebh_gatt_send_cb_port &rArr; [Anonymous Symbol] &rArr; ebh_l2cap_send
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_send_hvx
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_read_response
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_write
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[321]"></a>ebh_l2csig_send_cb_port</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ebh_l2csig_send_cb_port &rArr; [Anonymous Symbol] &rArr; ebh_l2cap_send
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_conn_parameters_update_request
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_connection_parameter_update_req_proc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[322]"></a>csble_init_no_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = csble_init_no_reset &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
</UL>

<P><STRONG><a name="[218]"></a>cs_ble_init</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = cs_ble_init &rArr; cs_bc_init &rArr; obc_reset &rArr; bbb_init &rArr; bbc_init &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_callback_set
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_transmit_callback_set
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_opt_cfg_create
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_create
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_sig_create
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_create
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_create
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_create
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csble_init_no_reset
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_create
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[346]"></a>ebh_smp_aes128</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ebh_smp_aes128 &rArr; drv_aes128_hw_encrypt &rArr; aes_hw_encrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_aes128_hw_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_alg_s1
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_alg_c1
</UL>

<P><STRONG><a name="[584]"></a>cs_ble_tick_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, csble_host_soc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_get_pending_data
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_set_state
</UL>

<P><STRONG><a name="[585]"></a>cs_ble_tick_diff_10ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, csble_host_soc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_get_pending_data
</UL>

<P><STRONG><a name="[328]"></a>ob_opt_cfg_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, csble_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ob_opt_cfg_create &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
</UL>

<P><STRONG><a name="[2b2]"></a>cs_opt_cfg_get</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, csble_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_pin_request
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[348]"></a>dbg_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dbg_init &rArr; obc_trc_io_reset &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_trc_io_reset
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_trc_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[34b]"></a>drv_cpft_customer_check</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, drv_cpft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = drv_cpft_customer_check &rArr;  drv_cpft_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_init
</UL>

<P><STRONG><a name="[34c]"></a>drv_cpft_init</STRONG> (Thumb, 624 bytes, Stack size 64 bytes, drv_cpft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = drv_cpft_init &rArr; drv_cpft_customer_check &rArr;  drv_cpft_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_efuse_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_register_step_set
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_rc32m
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_rc32m_power_enable
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_customer_check
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitPostLib
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_customer_check
</UL>

<P><STRONG><a name="[352]"></a>drv_cpft_uninit</STRONG> (Thumb, 252 bytes, Stack size 128 bytes, drv_cpft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = drv_cpft_uninit &rArr; drv_adc_control &rArr;  drv_adc_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitPostLib
</UL>

<P><STRONG><a name="[1e6]"></a>rom_drv_sfb_write_dma_ex</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drv_sf_base_a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rom_drv_sfb_write_dma_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_process_nonblock
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_process_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_dma
</UL>

<P><STRONG><a name="[1e7]"></a>rom_drv_sfb_write_dma</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_sf_base_a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rom_drv_sfb_write_dma &rArr; rom_drv_sfb_write_dma_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_dma_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_end
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1e8]"></a>rom_drv_sfb_critical_cs_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_sf_base_a1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_begin
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_end
</UL>

<P><STRONG><a name="[357]"></a>ebh_att_db_create</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ebh_att.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ebh_att_db_create &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_create
</UL>

<P><STRONG><a name="[35c]"></a>ebh_att_db_add</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ebh_att.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ebh_att_db_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_add_service
</UL>

<P><STRONG><a name="[35d]"></a>ebh_att_db_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ebh_att.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_clear_service
</UL>

<P><STRONG><a name="[370]"></a>ebh_att_db_iter</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, ebh_att.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ebh_att_db_iter
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[358]"></a>ebh_fsm_check_trans_block</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ebh_fsm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_check_trans_block
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_check_trans_block
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
</UL>

<P><STRONG><a name="[2c5]"></a>ebh_fsm_trigger</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, ebh_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_check_trans_block
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_done_adapt
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pin_response
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pairing_response
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_hci_cmp_adapt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_starting_state_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_adv_msg_sche_adapt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_state_proc
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[35a]"></a>ebh_fsm_state</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ebh_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ebh_fsm_state
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_done_adapt
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pairing_response
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2dd]"></a>ebh_fsm_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ebh_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_connected_adapt
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_fsm_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_set_fsm_peripheral
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[32b]"></a>ebh_gatt_create</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ebh_gatt_create &rArr; ebh_att_db_create &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_create
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
</UL>

<P><STRONG><a name="[2fd]"></a>ebh_gatts_add_service</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ebh_gatts_add_service &rArr; ebh_att_db_add
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_add
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gatts_add_service
</UL>

<P><STRONG><a name="[2fc]"></a>ebh_gatts_clear_service</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gatts_add_service
</UL>

<P><STRONG><a name="[301]"></a>ebh_gatts_read_response</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ebh_gatts_read_response &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gatts_read_response
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[364]"></a>ebh_gatts_write_response</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ebh_gatts_write_response &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2ff]"></a>ebh_gatts_send_hvx</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_gatts_send_hvx &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gatts_send_hvx
</UL>

<P><STRONG><a name="[33d]"></a>ebh_gatt_received_adapt</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ebh_gatt_received_adapt &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[303]"></a>ebh_gattc_find_service_by_uuid</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ebh_gattc_find_service_by_uuid &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gattc_find_service_by_uuid
</UL>

<P><STRONG><a name="[305]"></a>ebh_gattc_write</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ebh_gattc_write &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gattc_write
</UL>

<P><STRONG><a name="[299]"></a>ebh_gatt_sec_lvl_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ebh_gatt_sec_lvl_get &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_get_encrypt_state
</UL>

<P><STRONG><a name="[342]"></a>ebh_gatt_connected_adapt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ebh_gatt_connected_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_connected_cb_port
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[37b]"></a>ebh_gatt_connected_cb_port</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_connected_adapt
</UL>

<P><STRONG><a name="[345]"></a>ebh_gatt_disconnected_adapt</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ebh_gatt_disconnected_adapt &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_disconnected_cb_port
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[37c]"></a>ebh_gatt_disconnected_cb_port</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_disconnected_adapt
</UL>

<P><STRONG><a name="[335]"></a>ebh_gatt_sec_changed_adapt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ebh_gatt_sec_changed_adapt &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[33a]"></a>ebh_gatt_send_done_adapt</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ebh_gatt_send_done_adapt &rArr; ebh_gatt_evt_tx_complete &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_evt_tx_complete
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[327]"></a>ebh_hci_create</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ebh_hci_create &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
</UL>

<P><STRONG><a name="[289]"></a>ebh_hci_cmd_send</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_set_le_event_mask_cb
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_set_event_mask_cb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_read_buf_size_v1_cb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_read_bd_addr_cb
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_rsponse_cb_port
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_request_cb_port
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_set_addr_cb
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_conn_param_update_cb
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_conn_param_response_cb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_conn_param_reject_response_cb
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request_req_adapt
</UL>

<P><STRONG><a name="[296]"></a>ebh_hci_send_reg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csble_init_no_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_hci_cmp_adapt
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_starting_state_proc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request_req_adapt
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[32f]"></a>ebh_hci_evt_received_adapt</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ebh_hci_evt_received_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[329]"></a>ebh_l2cap_create</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ebh_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_l2cap_create &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
</UL>

<P><STRONG><a name="[31e]"></a>ebh_l2cap_send</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ebh_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ebh_l2cap_send
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_cb_port
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[330]"></a>ebh_l2cap_received_adapt</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, ebh_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ebh_l2cap_received_adapt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[31c]"></a>ebh_l2cap_connected_adapt</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ebh_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ebh_l2cap_connected_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_connected_event
</UL>

<P><STRONG><a name="[334]"></a>ebh_l2cap_disconnected_adapt</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ebh_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ebh_l2cap_disconnected_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[332]"></a>ebh_l2cap_acl_cfg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebh_l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[333]"></a>ebh_l2cap_packets_completed_adapt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ebh_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ebh_l2cap_packets_completed_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[32e]"></a>ebh_l2cap_sche_once</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, ebh_l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ebh_l2cap_sche_once
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[32a]"></a>ebh_l2cap_sig_create</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_l2cap_sig_create &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
</UL>

<P><STRONG><a name="[336]"></a>ebh_l2csig_sec_changed_adapt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[33c]"></a>ebh_l2csig_send_done_adapt</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ebh_l2csig_send_done_adapt &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[e1]"></a>l2cap_command_reject_rsp_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_l2cap_sig.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_l2cap_sig.o(.rodata)
</UL>
<P><STRONG><a name="[e2]"></a>l2cap_connection_parameter_update_req_proc</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = l2cap_connection_parameter_update_req_proc &rArr; ebh_l2cap_conn_param_update_request_event &rArr; ob_gap_conn_update_request_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_send_cb_port
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_conn_param_update_request_event
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_conn_param_update_check_event
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_l2cap_sig.o(.rodata)
</UL>
<P><STRONG><a name="[e3]"></a>l2cap_connection_parameter_update_rsp_proc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2cap_connection_parameter_update_rsp_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_conn_param_update_response_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_l2cap_sig.o(.rodata)
</UL>
<P><STRONG><a name="[38d]"></a>ebh_l2cap_conn_param_update_response_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_connection_parameter_update_rsp_proc
</UL>

<P><STRONG><a name="[33f]"></a>ebh_l2csig_received_adapt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ebh_l2csig_received_adapt &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[340]"></a>ebh_l2csig_connected_adapt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_connected_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[38e]"></a>ebh_l2csig_connected_port</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_connected_adapt
</UL>

<P><STRONG><a name="[343]"></a>ebh_l2csig_disconnected_adapt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_disconnected_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[38f]"></a>ebh_l2csig_disconnected_port</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_disconnected_adapt
</UL>

<P><STRONG><a name="[294]"></a>ebh_l2cap_conn_parameters_update_request</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_l2cap_conn_parameters_update_request &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_send_cb_port
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request
</UL>

<P><STRONG><a name="[287]"></a>ebh_mem_malloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ebh_port_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_event_callback_reg
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_pointer_expand
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_set
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_create
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_opt_cfg_create
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_create
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_sig_create
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_create
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_create
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_received_adapt
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_create
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_fsm_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_create
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request_req_adapt
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4d]"></a>ebh_mem_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ebh_port_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_done_adapt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_send_done_adapt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_done_adapt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_received_adapt
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_disconnected_adapt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_set_le_event_mask_cb
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_set_event_mask_cb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_read_buf_size_v1_cb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_read_bd_addr_cb
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_rsp
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_by_uuid_rsp
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_desc_rsp
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_char_rsp
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_fsm_deinit
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_deinit
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_deinit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_deinit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_set_addr_cb
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 3]<UL><LI> csble_gap_conn.o(.text)
<LI> csble_gap_scan.o(.text)
<LI> csble_gap_ext_adv.o(.text)
</UL>
<P><STRONG><a name="[32c]"></a>ebh_smp_create</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_create &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_per_sc_support
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_cen_sc_support
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
</UL>

<P><STRONG><a name="[2fb]"></a>ebh_smp_pairing_response</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ebh_smp_pairing_response &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_state
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_cb_port
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_pairing_response
</UL>

<P><STRONG><a name="[2e9]"></a>ebh_smp_pin_response</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ebh_smp_pin_response &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_pin_response
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_pin_request
</UL>

<P><STRONG><a name="[2f7]"></a>ebh_smp_bond_ltk_response</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ebh_smp_bond_ltk_response &rArr; [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_cb_port
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_bond_info_response
</UL>

<P><STRONG><a name="[2f8]"></a>ebh_smp_bond_irk_response</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ebh_smp_bond_irk_response &rArr; [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_cb_port
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_bond_info_response
</UL>

<P><STRONG><a name="[2f5]"></a>ebh_smp_enc_ltk_response</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ebh_smp_enc_ltk_response &rArr; ebh_smp_ltk_rsponse_cb_port &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_rsponse_cb_port
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_ltk_response
</UL>

<P><STRONG><a name="[3ac]"></a>ebh_smp_init_dist_flag</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ebh_smp_init_dist_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[33e]"></a>ebh_smp_received_adapt</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ebh_smp_received_adapt &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[341]"></a>ebh_smp_connected_adapt</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ebh_smp_connected_adapt &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_reset
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_connected_cb_port
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[39e]"></a>ebh_smp_connected_cb_port</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_connected_adapt
</UL>

<P><STRONG><a name="[344]"></a>ebh_smp_disconnected_adapt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ebh_smp_disconnected_adapt &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_disconnected_cb_port
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[39f]"></a>ebh_smp_disconnected_cb_port</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_disconnected_adapt
</UL>

<P><STRONG><a name="[338]"></a>ebh_smp_ltk_request_adapt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ebh_smp_ltk_request_adapt &rArr; ebh_smp_ltk_rsponse_cb_port &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_rsponse_cb_port
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[337]"></a>ebh_smp_encrypt_changed_adapt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ebh_smp_encrypt_changed_adapt &rArr; ebh_smp_evt_encrypted &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_encrypted
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[33b]"></a>ebh_smp_send_done_adapt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_send_done_adapt &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_state
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3a0]"></a>ebh_smp_st_send_random</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ebh_smp_st_send_random &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_cb_port
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[3a8]"></a>ebh_smp_fsm_peripheral_legacy_state_proc</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ebh_smp_fsm_peripheral_legacy_state_proc &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_pin_request &rArr; ebh_smp_pin_response &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_encrypted
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_alg_s1
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_st_send_random
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_init_dist_flag
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3b1]"></a>ebh_smp_fsm_state_proc</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ebh_smp_fsm_state_proc &rArr; ebh_smp_ltk_request_cb_port &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_cb_port
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_rsponse_cb_port
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_request_cb_port
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_pairing_request
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_ltk_request
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3ba]"></a>ebh_smp_alg_c1</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ebh_smp_alg_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ebh_smp_alg_c1 &rArr; ebh_smp_aes128 &rArr; drv_aes128_hw_encrypt &rArr; aes_hw_encrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_aes128
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3b0]"></a>ebh_smp_alg_s1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ebh_smp_alg_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ebh_smp_alg_s1 &rArr; ebh_smp_aes128 &rArr; drv_aes128_hw_encrypt &rArr; aes_hw_encrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_aes128
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[3b7]"></a>ebh_smp_sc_public_key_valid</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ebh_smp_dhkey_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ebh_smp_sc_public_key_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3b4]"></a>ebh_smp_set_fsm_peripheral</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ebh_smp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ebh_smp_set_fsm_peripheral &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_reset
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[390]"></a>ebh_smp_fsm_per_sc_support</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebh_smp_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_create
</UL>

<P><STRONG><a name="[391]"></a>ebh_smp_fsm_cen_sc_support</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebh_smp_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_create
</UL>

<P><STRONG><a name="[3bc]"></a>ebh_smp_rand128</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ebh_smp_rand_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ebh_smp_rand128
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3a5]"></a>ebh_smp_rand_int</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_smp_rand_soft.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3c1]"></a>SystemInitPostLib</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, entry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = SystemInitPostLib &rArr; drv_cpft_uninit &rArr; drv_adc_control &rArr;  drv_adc_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfig
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_uninit
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_critical_object_set
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitPost
</UL>

<P><STRONG><a name="[3c4]"></a>hci_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_init &rArr; hci_tl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_evt_mask_set
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[3c6]"></a>hci_evt_mask_set</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_evt_mask_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3ca]"></a>hci_send_2_host</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_free
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_end_ind_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_param_cmd_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_nb_supp_adv_sets_cmd_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_adv_data_len_cmd_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_ch_tx_pw_cmd_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbs_req_ind_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_end_ind_handler
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_phy_cmd_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_acl_rx_ind_handler
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stopped_ind_handler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_stat_send
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_cmp_send
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_chnl_map_cmd_handler
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[49a]"></a>hci_ble_conhdl_register</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_end_ind_handler
</UL>

<P><STRONG><a name="[47d]"></a>hci_ble_conhdl_unregister</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_link_disc
</UL>

<P><STRONG><a name="[3c7]"></a>hci_fc_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hci_fc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[4a2]"></a>hci_fc_acl_buf_size_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hci_fc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4a1]"></a>hci_fc_acl_en</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hci_fc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3e3]"></a>hci_fc_acl_packet_sent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hci_fc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3cd]"></a>hci_fc_host_nb_acl_pkts_complete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hci_fc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_fc_host_nb_acl_pkts_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_done
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3de]"></a>hci_fc_check_host_available_nb_acl_packets</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hci_fc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3dc]"></a>hci_look_for_cmd_desc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_look_for_cmd_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_get_max_param_size
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3df]"></a>hci_look_for_evt_desc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3e0]"></a>hci_look_for_le_evt_desc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3cb]"></a>hci_tl_send</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hci_tl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>

<P><STRONG><a name="[3c9]"></a>hci_tl_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hci_tl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_tl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[3e5]"></a>hci_cmd_get_max_param_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hci_tl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_cmd_get_max_param_size &rArr; hci_look_for_cmd_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
</UL>

<P><STRONG><a name="[3e6]"></a>hci_cmd_received</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, hci_tl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hci_cmd_received &rArr; [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_unpack
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
</UL>

<P><STRONG><a name="[3ea]"></a>hci_acl_tx_data_alloc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hci_tl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_acl_tx_data_alloc &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_alloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
</UL>

<P><STRONG><a name="[3eb]"></a>hci_acl_tx_data_received</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hci_tl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_acl_tx_data_received &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
</UL>

<P><STRONG><a name="[3ce]"></a>hci_cmd_done</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hci_tl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_host_nb_acl_pkts_complete
</UL>

<P><STRONG><a name="[3ec]"></a>llb_init</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, llb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llb_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[3ed]"></a>llb_llcp_tx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, llb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llb_llcp_tx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_tx_check
</UL>

<P><STRONG><a name="[257]"></a>llb_llcp_tx_free</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, llb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llb_llcp_tx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_tx_check
</UL>

<P><STRONG><a name="[248]"></a>llb_rx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llb_rx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_rxdesc_reset
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_rxdesc_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_free
</UL>

<P><STRONG><a name="[3e2]"></a>llb_rx_free</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, llb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llb_rx_free &rArr; llb_rx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_alloc
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_llcp_rx_ind_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_acl_rx_ind_handler
</UL>

<P><STRONG><a name="[281]"></a>llb_acl_tx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llb_acl_tx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc
</UL>

<P><STRONG><a name="[3f0]"></a>llb_acl_tx_elt_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, llb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler
</UL>

<P><STRONG><a name="[255]"></a>llb_acl_tx_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, llb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llb_acl_tx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_stop
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler
</UL>

<P><STRONG><a name="[3f2]"></a>llb_adv_tx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llb_adv_tx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_data_cmd_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_scan_rsp_data_cmd_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_data_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[22e]"></a>llb_adv_tx_free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, llb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llb_adv_tx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_new_data_release
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_new_data_release
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_data_cmd_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_scan_rsp_data_cmd_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_data_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3f3]"></a>llc_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = llc_init &rArr; llc_cleanup &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_task_create
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[3f4]"></a>llc_cleanup</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llc_cleanup &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_state_set
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stopped_ind_handler
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
</UL>

<P><STRONG><a name="[3fb]"></a>llc_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = llc_stop &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send_basic
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_state_set
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_disc_ind_handler
</UL>

<P><STRONG><a name="[3fc]"></a>llc_llcp_state_set</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_tx_check
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_disconnect
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop
</UL>

<P><STRONG><a name="[3fe]"></a>llc_start</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = llc_start &rArr; bbc_start &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_start
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_state_set
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_features_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_end_ind_handler
</UL>

<P><STRONG><a name="[400]"></a>llc_llcp_exchange_set</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = llc_llcp_exchange_set &rArr; obc_co_state_set &rArr; obc_co_q_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_state_set
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ver_exch_ind_handler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_phy_upd_ind_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_req_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_feats_exch_ind_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_encrypt_ind_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause_enc_req_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_req_handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_dl_upd_ind_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_disconnect_ind_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_con_upd_ind_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ch_map_upd_ind_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_channel_map_ind_handler
</UL>

<P><STRONG><a name="[402]"></a>llc_llcp_exchange_del</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llc_llcp_exchange_del &rArr; llc_llcp_exchange_timer_set &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_free
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_state_set
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[403]"></a>llc_llcp_exchange_timer_set</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llc_llcp_exchange_timer_set &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_terminate_ind_handler
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>

<P><STRONG><a name="[40a]"></a>llc_llcp_exchange_id_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, llc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ver_exch_ind_handler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_phy_upd_ind_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_phy_upd_cfm_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_version_ind_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_update_ind_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_rsp_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_req_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_feats_exch_ind_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_feature_rsp_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause_enc_req_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_dl_upd_ind_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_length_rsp_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_length_req_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_disc_ind_handler
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_rsp_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ch_map_upd_ind_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_map_upd_cfm_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[40d]"></a>llc_llcp_exchange_state_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_encrypt_ind_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[408]"></a>llc_llcp_exchange_state_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_req_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_phy_cmd_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmd_handler
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause_enc_req_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_req_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_handler
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init_term_proc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect_cmd_handler
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_move_cbk
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_upd_cmd_handler
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_channel_map_ind_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[415]"></a>llc_llcp_exchange_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, llc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_update_ind_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_rsp_handler
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_encrypt_ind_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_rsp_handler
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_length_rsp_handler
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_rsp_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[432]"></a>llc_llcp_exchange_err_ind</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llc_llcp_exchange_err_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_disc_ind_handler
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[404]"></a>llc_llcp_exchange_timer_pause_set</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llc_llcp_exchange_timer_pause_set &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[424]"></a>llc_llcp_exchange_collision_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_req_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler
</UL>

<P><STRONG><a name="[112]"></a>ll_channel_map_ind_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ll_channel_map_ind_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_exchange_del &rArr; llc_llcp_exchange_timer_set &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[128]"></a>ll_min_used_channels_ind_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ll_min_used_channels_ind_handler &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_nb_good_le_channels
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[103]"></a>hci_le_rd_chnl_map_cmd_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_rd_chnl_map_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[13c]"></a>llc_op_ch_map_upd_ind_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llc_op_ch_map_upd_ind_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[131]"></a>bbb_ch_map_upd_cfm_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = bbb_ch_map_upd_cfm_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[111]"></a>ll_connection_update_ind_handler</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ll_connection_update_ind_handler &rArr; [Anonymous Symbol] &rArr; llc_ll_reject_ind_pdu_send &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[120]"></a>ll_connection_param_req_handler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ll_connection_param_req_handler &rArr; [Anonymous Symbol] &rArr; llc_ll_reject_ind_pdu_send &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_collision_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[121]"></a>ll_connection_param_rsp_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ll_connection_param_rsp_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[102]"></a>hci_le_con_upd_cmd_handler</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_le_con_upd_cmd_handler &rArr; llc_cmd_stat_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_stat_send
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[108]"></a>hci_le_rem_con_param_req_reply_cmd_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = hci_le_rem_con_param_req_reply_cmd_handler &rArr; [Anonymous Symbol] &rArr; llc_ll_reject_ind_pdu_send &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_cmp_send
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[109]"></a>hci_le_rem_con_param_req_neg_reply_cmd_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = hci_le_rem_con_param_req_neg_reply_cmd_handler &rArr; [Anonymous Symbol] &rArr; llc_ll_reject_ind_pdu_send &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_cmp_send
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[13a]"></a>llc_op_con_upd_ind_handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = llc_op_con_upd_ind_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[130]"></a>bbc_param_upd_cfm_handler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = bbc_param_upd_cfm_handler &rArr; [Anonymous Symbol] &rArr; llc_ll_reject_ind_pdu_send &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[133]"></a>bbc_estab_ind_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bbc_estab_ind_handler &rArr; obc_llt_params_future_set &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_set
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_plan_elt_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[134]"></a>bbc_offset_upd_ind_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bbc_offset_upd_ind_handler &rArr; obc_llt_params_future_set &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_set
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_del
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_plan_elt_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[72]"></a>llc_con_move_cbk</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = llc_con_move_cbk &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_plan_elt_get
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_adv.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>ll_terminate_ind_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ll_terminate_ind_handler &rArr; llc_disconnect &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_disconnect
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[42f]"></a>llc_disconnect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = llc_disconnect &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_stop
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_llcp_rx_ind_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_acl_rx_ind_handler
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_terminate_ind_handler
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[12f]"></a>bbb_disc_ind_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bbb_disc_ind_handler &rArr; llc_stop &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_err_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[135]"></a>llc_stopped_ind_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llc_stopped_ind_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_link_disc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[138]"></a>llc_op_disconnect_ind_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = llc_op_disconnect_ind_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[100]"></a>hci_disconnect_cmd_handler</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_disconnect_cmd_handler &rArr; llc_cmd_stat_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_stat_send
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[437]"></a>llc_init_term_proc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = llc_init_term_proc &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
</UL>

<P><STRONG><a name="[123]"></a>ll_length_req_handler</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, llc_dl_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ll_length_req_handler &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_len_update
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[124]"></a>ll_length_rsp_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, llc_dl_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ll_length_rsp_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[10a]"></a>hci_le_set_data_len_cmd_handler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, llc_dl_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_le_set_data_len_cmd_handler &rArr; llc_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_cmp_send
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[13b]"></a>llc_op_dl_upd_ind_handler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, llc_dl_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = llc_op_dl_upd_ind_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[11b]"></a>ll_pause_enc_req_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ll_pause_enc_req_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[11c]"></a>ll_pause_enc_rsp_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ll_pause_enc_rsp_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[114]"></a>ll_enc_req_handler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ll_enc_req_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[115]"></a>ll_enc_rsp_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ll_enc_rsp_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[116]"></a>ll_start_enc_req_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ll_start_enc_req_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[117]"></a>ll_start_enc_rsp_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ll_start_enc_rsp_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[105]"></a>hci_le_start_enc_cmd_handler</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_le_start_enc_cmd_handler &rArr; llc_cmd_stat_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_stat_send
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[106]"></a>hci_le_ltk_req_reply_cmd_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = hci_le_ltk_req_reply_cmd_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_cmp_send
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[107]"></a>hci_le_ltk_req_neg_reply_cmd_handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = hci_le_ltk_req_neg_reply_cmd_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init_term_proc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_cmp_send
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[140]"></a>llc_encrypt_ind_handler</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = llc_encrypt_ind_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[139]"></a>llc_op_encrypt_ind_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = llc_op_encrypt_ind_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[119]"></a>ll_feature_req_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, llc_feat_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ll_feature_req_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[11f]"></a>ll_slave_feature_req_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, llc_feat_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ll_slave_feature_req_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[11a]"></a>ll_feature_rsp_handler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, llc_feat_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ll_feature_rsp_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[104]"></a>hci_le_rd_rem_feats_cmd_handler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, llc_feat_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_le_rd_rem_feats_cmd_handler &rArr; llc_cmd_stat_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_stat_send
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[137]"></a>llc_op_feats_exch_ind_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, llc_feat_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llc_op_feats_exch_ind_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[427]"></a>llc_cmd_cmp_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llc_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_set_pref_slave_latency_cmd_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_set_pref_slave_evt_dur_cmd_handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_command_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_neg_reply_cmd_handler
</UL>

<P><STRONG><a name="[426]"></a>llc_cmd_stat_send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llc_cmd_stat_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_phy_cmd_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmd_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect_cmd_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_upd_cmd_handler
</UL>

<P><STRONG><a name="[10f]"></a>hci_rd_tx_pwr_lvl_cmd_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_rd_tx_pwr_lvl_cmd_handler &rArr; [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_current_tx_power_get
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[110]"></a>hci_rd_rssi_cmd_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_rd_rssi_cmd_handler &rArr; [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_rssi_get
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_rx_path_comp_get
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[10d]"></a>hci_vs_set_pref_slave_latency_cmd_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_vs_set_pref_slave_latency_cmd_handler &rArr; llc_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_pref_slave_latency_set
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[10e]"></a>hci_vs_set_pref_slave_evt_dur_cmd_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_vs_set_pref_slave_evt_dur_cmd_handler &rArr; llc_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_pref_slave_evt_dur_set
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[129]"></a>hci_command_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hci_command_handler &rArr; llc_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[12a]"></a>hci_acl_data_handler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hci_acl_data_handler &rArr; bbc_data_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_free
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_tx
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_elt_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[12d]"></a>bbb_acl_rx_ind_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bbb_acl_rx_ind_handler &rArr; llc_disconnect &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[12e]"></a>bbb_acl_tx_cfm_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bbb_acl_tx_cfm_handler &rArr; [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[422]"></a>llc_ll_reject_ind_pdu_send</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, llc_llcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = llc_ll_reject_ind_pdu_send &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_llcp_rx_ind_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[414]"></a>llc_llcp_send</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, llc_llcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_pack
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_tx_check
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_llcp_rx_ind_handler
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_length_req_handler
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ll_reject_ind_pdu_send
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3fd]"></a>llc_llcp_tx_check</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, llc_llcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_llcp_tx_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_llcp_tx
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_front
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_extract
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_llcp_tx_alloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_llcp_tx_cfm_handler
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_state_set
</UL>

<P><STRONG><a name="[12b]"></a>bbb_llcp_rx_ind_handler</STRONG> (Thumb, 252 bytes, Stack size 112 bytes, llc_llcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = bbb_llcp_rx_ind_handler &rArr; llc_ll_reject_ind_pdu_send &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_unpack
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_free
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_disconnect
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ll_reject_ind_pdu_send
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[12c]"></a>bbb_llcp_tx_cfm_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, llc_llcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bbb_llcp_tx_cfm_handler &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_tx_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[125]"></a>ll_phy_req_handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ll_phy_req_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_collision_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[126]"></a>ll_phy_rsp_handler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ll_phy_rsp_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[127]"></a>ll_phy_update_ind_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ll_phy_update_ind_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[10b]"></a>hci_le_rd_phy_cmd_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_rd_phy_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[10c]"></a>hci_le_set_phy_cmd_handler</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_le_set_phy_cmd_handler &rArr; llc_cmd_stat_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_stat_send
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[13d]"></a>llc_op_phy_upd_ind_handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = llc_op_phy_upd_ind_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[132]"></a>bbb_phy_upd_cfm_handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = bbb_phy_upd_cfm_handler &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[136]"></a>llc_op_ver_exch_ind_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, llc_ver_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llc_op_ver_exch_ind_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[11d]"></a>ll_version_ind_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, llc_ver_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ll_version_ind_handler &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[101]"></a>hci_rd_rem_ver_info_cmd_handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, llc_ver_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_rd_rem_ver_info_cmd_handler &rArr; llc_cmd_stat_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_stat_send
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.rodata)
</UL>
<P><STRONG><a name="[478]"></a>llm_cmd_cmp_send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_hci_command_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_en_cmd_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_scan_rsp_data_cmd_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_data_cmd_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_end_ind_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_end_ind_handler
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4a5]"></a>llm_dev_list_empty_entry</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[479]"></a>llm_dev_list_search</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llm_dev_list_search &rArr; obc_co_bdaddr_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_bdaddr_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_end_ind_handler
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_link_disc
</UL>

<P><STRONG><a name="[47b]"></a>llm_init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, llm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llm_init &rArr; obc_co_timer_clear &rArr; obc_co_q_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_free
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_clear
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_task_create
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[433]"></a>llm_link_disc</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, llm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llm_link_disc &rArr; llm_dev_list_search &rArr; obc_co_bdaddr_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_white_list_add
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ble_conhdl_unregister
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_dev_list_search
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_del
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stopped_ind_handler
</UL>

<P><STRONG><a name="[412]"></a>llm_master_ch_map_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[448]"></a>llm_le_evt_mask_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, llm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_end_ind_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3ff]"></a>llm_le_features_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
</UL>

<P><STRONG><a name="[245]"></a>llm_tx_path_comp_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[463]"></a>llm_rx_path_comp_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_handler
</UL>

<P><STRONG><a name="[420]"></a>llm_plan_elt_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_move_cbk
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_offset_upd_ind_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_estab_ind_handler
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[47e]"></a>llm_ch_map_update</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, llm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = llm_ch_map_update &rArr; bbb_ch_map_set
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_ch_map_update
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_map_set
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_assess_data_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_nb_good_le_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[482]"></a>llm_activity_free_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, llm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llm_activity_free_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_param_cmd_handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_param_cmd_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[28b]"></a>llm_public_address_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_set
</UL>

<P><STRONG><a name="[28d]"></a>llm_public_address_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_get
</UL>

<P><STRONG><a name="[489]"></a>llm_adv_hdl_to_id</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llm_adv_hdl_to_id
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_en_cmd_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_scan_rsp_data_cmd_handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_param_cmd_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_data_cmd_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_set_rand_addr_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rmv_adv_set_cmd_handler
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[156]"></a>hci_le_rd_adv_ch_tx_pw_cmd_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_rd_adv_ch_tx_pw_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[152]"></a>hci_le_set_adv_param_cmd_handler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_le_set_adv_param_cmd_handler &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[153]"></a>hci_le_set_adv_data_cmd_handler</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = hci_le_set_adv_data_cmd_handler &rArr; bba_adv_data_update &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_adv_data_update
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_get
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[155]"></a>hci_le_set_scan_rsp_data_cmd_handler</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = hci_le_set_scan_rsp_data_cmd_handler &rArr; bba_scan_rsp_data_update &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_scan_rsp_data_update
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_get
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[154]"></a>hci_le_set_adv_en_cmd_handler</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = hci_le_set_adv_en_cmd_handler &rArr; bba_start &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_stop
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[142]"></a>hci_le_set_ext_adv_param_cmd_handler</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_le_set_ext_adv_param_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[157]"></a>hci_le_set_adv_set_rand_addr_cmd_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hci_le_set_adv_set_rand_addr_cmd_handler &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_rand_addr_update
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[143]"></a>hci_le_set_ext_adv_data_cmd_handler</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = hci_le_set_ext_adv_data_cmd_handler &rArr; bba_adv_data_update &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_new_data_release
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_adv_data_update
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_alloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[158]"></a>hci_le_set_ext_scan_rsp_data_cmd_handler</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = hci_le_set_ext_scan_rsp_data_cmd_handler &rArr; bba_scan_rsp_data_update &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_scan_rsp_data_update
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_new_data_release
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_alloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[141]"></a>hci_le_set_ext_adv_en_cmd_handler</STRONG> (Thumb, 880 bytes, Stack size 152 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = hci_le_set_ext_adv_en_cmd_handler &rArr; bba_start &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_sync_info_update
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_stop
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_restart
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_get
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_set
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[15d]"></a>hci_le_set_per_adv_param_cmd_handler</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_le_set_per_adv_param_cmd_handler &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_free
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[15e]"></a>hci_le_set_per_adv_data_cmd_handler</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hci_le_set_per_adv_data_cmd_handler &rArr; bbp_data_update &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_new_data_release
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_data_update
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_alloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[15f]"></a>hci_le_set_per_adv_en_cmd_handler</STRONG> (Thumb, 444 bytes, Stack size 96 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = hci_le_set_per_adv_en_cmd_handler &rArr; bbp_start &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_stop
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_sync_info_update
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_set
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_req
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[159]"></a>hci_le_rd_max_adv_data_len_cmd_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_le_rd_max_adv_data_len_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[15a]"></a>hci_le_rd_nb_supp_adv_sets_cmd_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_rd_nb_supp_adv_sets_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[15b]"></a>hci_le_rmv_adv_set_cmd_handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_le_rmv_adv_set_cmd_handler &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[15c]"></a>hci_le_clear_adv_sets_cmd_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hci_le_clear_adv_sets_cmd_handler &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[17e]"></a>bbs_req_ind_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bbs_req_ind_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata)
</UL>
<P><STRONG><a name="[17f]"></a>bba_end_ind_handler</STRONG> (Thumb, 792 bytes, Stack size 80 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = bba_end_ind_handler &rArr; llc_start &rArr; bbc_start &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_white_list_rem
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ble_conhdl_register
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_dev_list_search
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_evt_mask_check
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata)
</UL>
<P><STRONG><a name="[180]"></a>bbp_end_ind_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bbp_end_ind_handler &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata)
</UL>
<P><STRONG><a name="[181]"></a>llm_hci_command_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llm_hci_command_handler &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata)
</UL>
<P><STRONG><a name="[17d]"></a>bbt_end_ind_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llm_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bbt_end_ind_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata)
</UL>
<P><STRONG><a name="[456]"></a>llp_aes128_encrypt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llp_aes128_encrypt &rArr; drv_aes128_hw_encrypt &rArr; aes_hw_encrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_aes128_hw_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4a8]"></a>nvds_init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nvds_init &rArr; mbr_read_part &rArr; mbr_probe &rArr; mbr_sf_erase_write_sector_verify &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_capacity
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read_part
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_located
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_cur_obj
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[4b8]"></a>nvds_get</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nvds_get &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4bb]"></a>nvds_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = nvds_del &rArr; nvds_put &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4bc]"></a>nvds_put</STRONG> (Thumb, 424 bytes, Stack size 304 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = nvds_put &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_del
</UL>

<P><STRONG><a name="[4c7]"></a>ob_evt_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ob_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = ob_evt_init &rArr;  cs_bc_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
</UL>

<P><STRONG><a name="[325]"></a>ob_evt_callback_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ob_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_init
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_task_init
</UL>

<P><STRONG><a name="[1f2]"></a>ob_evt_callback_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ob_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_bb_frame_ongoing
</UL>

<P><STRONG><a name="[1f3]"></a>ob_evt_set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ob_evt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_sleep_duration_check
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_cb_port
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_adv_msg_sche_trigger_port
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_set
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_clear
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_state_set
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_bb_frame_ongoing
</UL>

<P><STRONG><a name="[1f4]"></a>ob_evt_schedule</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ob_evt.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ob_evt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_schedule_event
</UL>

<P><STRONG><a name="[32d]"></a>ob_evt_clear</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ob_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4c8]"></a>cs_ble_mem_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ob_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cs_ble_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_heap_init
</UL>

<P><STRONG><a name="[8a]"></a>cs_ble_mem_heap_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ob_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs_ble_mem_heap_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_ble_mem_heap.o(.text.cs_ble_mem_heap_init)
</UL>
<P><STRONG><a name="[239]"></a>cs_ble_mem_malloc</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, ob_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cs_ble_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_start
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_set
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
</UL>

<P><STRONG><a name="[228]"></a>cs_ble_mem_free</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, ob_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cs_ble_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_free
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_llcp_tx_cfm_handler
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_clear
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cleanup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_flush
</UL>

<P><STRONG><a name="[4d8]"></a>cs_ble_mem_is_freed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ob_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[324]"></a>cs_bc_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, obc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cs_bc_init &rArr; obc_reset &rArr; bbb_init &rArr; bbc_init &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_callback_set
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_heap_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_rf_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_driver_init
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_init
</UL>

<P><STRONG><a name="[73]"></a>obc_schedule</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, obc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> obc.o(.text)
</UL>
<P><STRONG><a name="[1f0]"></a>obc_schedule_event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, obc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = obc_schedule_event &rArr; ob_evt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_schedule
</UL>

<P><STRONG><a name="[1f1]"></a>obc_bb_frame_ongoing</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, obc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_prevent
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_allow
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_ana_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_callback_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_set
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_skip_isr
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_end_isr
</UL>

<P><STRONG><a name="[49b]"></a>obc_reset</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, obc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = obc_reset &rArr; bbb_init &rArr; bbc_init &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_init
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_init
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_init
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_init
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_driver_init
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[587]"></a>cs_bc_bb_frame_ongoing_callback_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_24g_init
</UL>

<P><STRONG><a name="[4ca]"></a>obc_co_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, obc_co.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obc_co_init &rArr; obc_co_task_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer2_init
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
</UL>

<P><STRONG><a name="[4d0]"></a>obc_co_flush</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, obc_co.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = obc_co_flush &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[3e4]"></a>obc_co_list_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obc_co_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer2_init
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_init
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_init
</UL>

<P><STRONG><a name="[63]"></a>obc_co_list_pool_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, obc_co_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_co_list_pool_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llb.o(.text)
</UL>
<P><STRONG><a name="[264]"></a>obc_co_list_push_back</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, obc_co_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_llcp_tx_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_free
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_tx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_free
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_set
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_state_set
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_event_start_isr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_insert_after
</UL>

<P><STRONG><a name="[4ed]"></a>obc_co_list_push_back_sublist</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, obc_co_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
</UL>

<P><STRONG><a name="[1eb]"></a>obc_co_list_push_front</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, obc_co_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_tx_check
</UL>

<P><STRONG><a name="[1ec]"></a>obc_co_list_pop_front</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, obc_co_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_alloc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_alloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_llcp_tx_cfm_handler
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_llcp_tx_alloc
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_alloc
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_sw_isr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_event_start_isr
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer2_isr
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_flush
</UL>

<P><STRONG><a name="[1ed]"></a>obc_co_list_extract</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, obc_co_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obc_co_list_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_del
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_tx_check
</UL>

<P><STRONG><a name="[1ee]"></a>obc_co_list_extract_sublist</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, obc_co_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_co_list_extract_sublist
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
</UL>

<P><STRONG><a name="[1ef]"></a>obc_co_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, obc_co_list.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
</UL>

<P><STRONG><a name="[226]"></a>obc_co_msg_alloc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, obc_co_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_stop
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_stop
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send_basic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_end_ind_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_param_cmd_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_nb_supp_adv_sets_cmd_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_adv_data_len_cmd_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_ch_tx_pw_cmd_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbs_req_ind_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_end_ind_handler
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_phy_cmd_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_phy_cmd_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_tx_pwr_lvl_cmd_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_acl_rx_ind_handler
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmd_handler
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stopped_ind_handler
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_stat_send
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cmd_cmp_send
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_move_cbk
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_chnl_map_cmd_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[227]"></a>obc_co_msg_send</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, obc_co_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_co_msg_send
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_stop
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_stop
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send_basic
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_phy_cmd_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmd_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_handler
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init_term_proc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect_cmd_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_move_cbk
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_upd_cmd_handler
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_min_used_channels_ind_handler
</UL>

<P><STRONG><a name="[256]"></a>obc_co_msg_send_basic</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, obc_co_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = obc_co_msg_send_basic &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3cc]"></a>obc_co_msg_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, obc_co_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = obc_co_msg_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_param_cmd_handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_param_cmd_handler
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_flush
</UL>

<P><STRONG><a name="[4d9]"></a>obc_co_q_extract</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, obc_co_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = obc_co_q_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_set
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_clear
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_state_set
</UL>

<P><STRONG><a name="[4de]"></a>obc_co_q_insert</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, obc_co_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = obc_co_q_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_set
</UL>

<P><STRONG><a name="[4d5]"></a>obc_co_task_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, obc_co_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_co_task_init
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_callback_set
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_init
</UL>

<P><STRONG><a name="[3f5]"></a>obc_co_task_create</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, obc_co_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_co_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
</UL>

<P><STRONG><a name="[3f7]"></a>obc_co_state_set</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, obc_co_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = obc_co_state_set &rArr; obc_co_q_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_q_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cleanup
</UL>

<P><STRONG><a name="[405]"></a>obc_co_state_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, obc_co_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4d6]"></a>obc_co_timer_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obc_co_timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_init
</UL>

<P><STRONG><a name="[4dd]"></a>obc_co_time</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, obc_co_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_co_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_time_32k_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_set
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3f9]"></a>obc_co_timer_set</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, obc_co_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_timer_cotimer_set
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_time
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_q_insert
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_q_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3fa]"></a>obc_co_timer_clear</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, obc_co_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = obc_co_timer_clear &rArr; obc_co_q_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_timer_cotimer_set
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_q_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4d7]"></a>obc_co_timer2_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obc_co_timer2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_init
</UL>

<P><STRONG><a name="[4df]"></a>obc_co_timer2_isr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, obc_co_timer2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = obc_co_timer2_isr &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_time_32k_get
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_sleep_duration_check
</UL>

<P><STRONG><a name="[47a]"></a>obc_co_bdaddr_compare</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, obc_co_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obc_co_bdaddr_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_dev_list_search
</UL>

<P><STRONG><a name="[40f]"></a>obc_co_nb_good_le_channels</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, obc_co_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obc_co_nb_good_le_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ch_map_update
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_min_used_channels_ind_handler
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3dd]"></a>obc_co_util_pack</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, obc_co_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>

<P><STRONG><a name="[3e8]"></a>obc_co_util_unpack</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, obc_co_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = obc_co_util_unpack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_llcp_rx_ind_handler
</UL>

<P><STRONG><a name="[236]"></a>obc_co_ble_pkt_dur_in_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, obc_co_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1e9]"></a>obc_co_clk_add_bs</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, obc_co_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_co_clk_add_bs
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_start
</UL>

<P><STRONG><a name="[1ea]"></a>obc_co_clk_sub_bs</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, obc_co_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_co_clk_sub_bs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1f8]"></a>obc_time_32k_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obc_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_sleep_duration_check
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_event_start_isr
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer2_isr
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_time
</UL>

<P><STRONG><a name="[1f9]"></a>obc_prevent_sleep_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, obc_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_set
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
</UL>

<P><STRONG><a name="[1fa]"></a>obc_prevent_sleep_clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, obc_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_skip_isr
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_end_isr
</UL>

<P><STRONG><a name="[1fb]"></a>obc_timer_llt_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, obc_driver.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[1fc]"></a>obc_sleep_duration_check</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, obc_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = obc_sleep_duration_check &rArr; obc_llt_timer_sw_isr &rArr; obc_llt_timer_event_start_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_time_32k_get
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_sw_isr
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer2_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1fd]"></a>cs_bc_isr</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, obc_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cs_bc_isr &rArr; obc_llt_et_skip_isr &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_tx_isr
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_skip_isr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_rx_isr
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_end_isr
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_sw_half_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_IRQHandler
</UL>

<P><STRONG><a name="[4cd]"></a>obc_driver_init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, obc_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[251]"></a>obc_active_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, obc_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4db]"></a>obc_timer_cotimer_set</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, obc_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_timer_cotimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_set
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_clear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4e1]"></a>obc_timer_cotimer2_set</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, obc_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4ee]"></a>obc_sw_int_req</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, obc_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_event_start_isr
</UL>

<P><STRONG><a name="[4e8]"></a>obc_sw_half_reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, obc_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = obc_sw_half_reset &rArr; obc_llt_et_end_isr &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_rxdesc_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_end_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_isr
</UL>

<P><STRONG><a name="[3e1]"></a>obc_hci_h4_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, obc_hci_h4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_hci_h4_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[331]"></a>obc_hci_h4_receive_handler</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, obc_hci_h4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = obc_hci_h4_receive_handler &rArr; hci_cmd_received &rArr; [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_malloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_get_max_param_size
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_prevent_sleep_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[326]"></a>obc_hci_h4_transmit_callback_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obc_hci_h4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_init
</UL>

<P><STRONG><a name="[3c8]"></a>obc_hci_h4_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, obc_hci_h4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[4d2]"></a>obc_llt_et_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, obc_llt_et.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_llt_et_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[1f5]"></a>obc_llt_et_rx_isr</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, obc_llt_et.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = obc_llt_et_rx_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_isr
</UL>

<P><STRONG><a name="[1f6]"></a>obc_llt_et_end_isr</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, obc_llt_et.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = obc_llt_et_end_isr &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_prevent_sleep_clear
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_bb_frame_ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_isr
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_sw_half_reset
</UL>

<P><STRONG><a name="[1f7]"></a>obc_llt_et_set</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, obc_llt_et.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = obc_llt_et_set &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_prevent_sleep_set
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_bb_frame_ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4e6]"></a>obc_llt_et_tx_isr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, obc_llt_et.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obc_llt_et_tx_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_isr
</UL>

<P><STRONG><a name="[4e7]"></a>obc_llt_et_skip_isr</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, obc_llt_et.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = obc_llt_et_skip_isr &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_prevent_sleep_clear
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_bb_frame_ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_isr
</UL>

<P><STRONG><a name="[253]"></a>obc_llt_et_cur_cs_idx_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, obc_llt_et.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4eb]"></a>obc_llt_params_current_compute</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, obc_llt_params_current.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = obc_llt_params_current_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_per_remove
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_per_add
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_fg_remove
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_fg_add
</UL>

<P><STRONG><a name="[4d4]"></a>obc_llt_params_current_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, obc_llt_params_current.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_llt_params_current_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[23c]"></a>obc_llt_params_current_fg_add</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, obc_llt_params_current.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = obc_llt_params_current_fg_add &rArr; obc_llt_params_current_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
</UL>

<P><STRONG><a name="[225]"></a>obc_llt_params_current_fg_remove</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, obc_llt_params_current.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = obc_llt_params_current_fg_remove &rArr; obc_llt_params_current_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[25d]"></a>obc_llt_params_current_per_add</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, obc_llt_params_current.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = obc_llt_params_current_per_add &rArr; obc_llt_params_current_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_start
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[259]"></a>obc_llt_params_current_per_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, obc_llt_params_current.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = obc_llt_params_current_per_remove &rArr; obc_llt_params_current_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4d3]"></a>obc_llt_params_future_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, obc_llt_params_future.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[42b]"></a>obc_llt_params_future_set</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, obc_llt_params_future.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = obc_llt_params_future_set &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_en_cmd_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_offset_upd_ind_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_estab_ind_handler
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[42a]"></a>obc_llt_params_future_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, obc_llt_params_future.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = obc_llt_params_future_del &rArr; obc_co_list_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_en_cmd_handler
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_link_disc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_offset_upd_ind_handler
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[42c]"></a>obc_llt_params_future_req</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, obc_llt_params_future.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = obc_llt_params_future_req &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_en_cmd_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[42e]"></a>obc_llt_params_future_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, obc_llt_params_future.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = obc_llt_params_future_check &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1fe]"></a>obc_llt_timer_insert</STRONG> (Thumb, 752 bytes, Stack size 48 bytes, obc_llt_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_time_32k_get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_front
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_sw_int_req
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_insert_after
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_extract_sublist
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back_sublist
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1ff]"></a>obc_llt_timer_del</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, obc_llt_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = obc_llt_timer_del &rArr; obc_co_list_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_stop
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_stop
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_stop
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_flow_set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[200]"></a>obc_llt_timer_event_start_isr</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, obc_llt_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = obc_llt_timer_event_start_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_time_32k_get
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_sw_int_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_sw_isr
</UL>

<P><STRONG><a name="[4d1]"></a>obc_llt_timer_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, obc_llt_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obc_llt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
</UL>

<P><STRONG><a name="[4e5]"></a>obc_llt_timer_sw_isr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, obc_llt_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = obc_llt_timer_sw_isr &rArr; obc_llt_timer_event_start_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_event_start_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_sleep_duration_check
</UL>

<P><STRONG><a name="[4cc]"></a>obc_rf_init</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, obc_rf_asic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = obc_rf_init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
</UL>

<P><STRONG><a name="[34a]"></a>obc_trc_io_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, obc_trc_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>

<P><STRONG><a name="[349]"></a>obc_trc_io_reset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, obc_trc_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = obc_trc_io_reset &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>

<P><STRONG><a name="[4f0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_set
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_clk_usart_div_set
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
</UL>

<P><STRONG><a name="[21f]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_aa_gen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_idx_get
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_rand_int
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_rand128
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[558]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfig
</UL>

<P><STRONG><a name="[685]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[686]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_data
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_cmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_event_cb
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_init
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write_part
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_usart_cb
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_efuse_read
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_hw_encrypt
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_pointer_expand
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_received_adapt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_received_adapt
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_send_hvx
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_read_response
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_write
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_find_service_by_uuid
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_ltk_response
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_irk_response
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_rsponse_cb_port
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_request_cb_port
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_ltk_info_response
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_irk_info_response
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_le_evt_adapt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_data_cmd_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_scan_rsp_data_cmd_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_data_cmd_handler
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_llcp_rx_ind_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_tx_check
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_rf_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3da]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_unpack
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_pack
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[687]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[688]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4f3]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_get_dummy
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[283]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
</UL>

<P><STRONG><a name="[689]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_connected_adapt
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_create
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_connected_adapt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_end_ind_handler
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_data
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_env_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_event_cb
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEvtTask
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_evt_handler
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_start
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_create
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_uninit
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_create
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_create
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_create
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_read_by_uuid_rsp
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_desc_rsp
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_fsm_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_request_recv_evt_adapt
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_init
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_task_init
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_init
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_init
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3c5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_get
</UL>

<P><STRONG><a name="[4f4]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[58d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_init
</UL>

<P><STRONG><a name="[616]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_commands
</UL>

<P><STRONG><a name="[217]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_event_cb
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_get
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_sector_is_ok
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_customer_check
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[572]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok
</UL>

<P><STRONG><a name="[573]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok
</UL>

<P><STRONG><a name="[4f5]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdexec
</UL>

<P><STRONG><a name="[88]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem32w
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem32r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_cmd.o(.text.cmd_mem32w)
</UL>
<P><STRONG><a name="[4fa]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[4fd]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
</UL>

<P><STRONG><a name="[4fe]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[5a4]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_freq
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[4ff]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[500]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[504]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[505]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[506]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[507]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[5ba]"></a>__aeabi_fcmpge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[5b9]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[5a3]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpeq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_freq
</UL>

<P><STRONG><a name="[56a]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
</UL>

<P><STRONG><a name="[569]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[567]"></a>__aeabi_dcmpge</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[566]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[508]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[509]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[50a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[50b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
</UL>

<P><STRONG><a name="[5b6]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[5a5]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_freq
</UL>

<P><STRONG><a name="[50c]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[50d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
</UL>

<P><STRONG><a name="[5bc]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
</UL>

<P><STRONG><a name="[4f2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[68a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4f1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[68b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[501]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[68c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[4f8]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[4f6]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[50e]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_timer_get
</UL>

<P><STRONG><a name="[50f]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[4f9]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[68d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4fc]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[4fb]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[503]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[502]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[210]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[68e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[510]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[68f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[690]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>ADC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_isr.o(.text.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ADC_IRQHandler &rArr; drv_adc_isr &rArr; drv_adc_convert_channel_data &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_isr.o(.text.BT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BT_IRQHandler &rArr; cs_bc_isr &rArr; obc_llt_et_skip_isr &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BT_WAKEUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.BT_WAKEUP_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WAKEUP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WAKEUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CC_INTR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.CC_INTR_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_INTR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_INTR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CRY32M_RDY_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.CRY32M_RDY_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRY32M_RDY_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRY32M_RDY_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>CS_24G_RF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_isr.o(.text.CS_24G_RF_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CS_24G_RF_IRQHandler &rArr; drv_cs_24g_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cs_24g_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_isr.o(.text.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_IRQHandler &rArr; drv_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_dma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EFUSE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.EFUSE_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler &rArr; drv_gpio_isr &rArr; drv_gpio_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C0_IRQHandler &rArr; drv_i2c_isr &rArr; drv_i2c_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>LP_TIMER_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.LP_TIMER_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lp_tim_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PIN_WAKEUP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_isr.o(.text.PIN_WAKEUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIN_WAKEUP_IRQHandler &rArr; drv_pmu_pin_wakeup_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_pin_wakeup_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PMU_POF_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.PMU_POF_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_POF_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_POF_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PMU_TIMER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_isr.o(.text.PMU_TIMER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PMU_TIMER_IRQHandler &rArr; drv_pmu_timer_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_timer_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_1HZ_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.RTC_1HZ_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RTC_1HZ_IRQHandler &rArr; drv_rtc_second_isr &rArr; drv_rtc_timer_get &rArr; OUTLINED_FUNCTION_1 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_second_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RTC_AF_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.RTC_AF_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RTC_AF_IRQHandler &rArr; drv_rtc_alarm_isr &rArr; drv_rtc_timer_get &rArr; OUTLINED_FUNCTION_1 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_alarm_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SF_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_isr.o(.text.SF_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SOFT0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.SOFT0_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SOFT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.SOFT1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SOFT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.SOFT2_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SOFT3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.SOFT3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SOFT4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.SOFT4_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SOFT5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.SOFT5_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SOFT6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.SOFT6_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT6_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SOFT7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.SOFT7_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.SPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI0_IRQHandler &rArr; drv_spi_isr &rArr; drv_spi_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_IRQHandler &rArr; drv_spi_isr &rArr; drv_spi_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c3]"></a>SystemConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, system.o(.text.SystemConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SystemConfig &rArr; drv_sfs_config &rArr; drv_sf_config &rArr; drv_sf_quad_enable &rArr; drv_sf_write_sr_mask_16bits &rArr; drv_sf_write_sr_16bits &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_timer_init
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_config
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_change_param
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_startup
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rng_get
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitPostLib
</UL>

<P><STRONG><a name="[211]"></a>SystemInit</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, system.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; drv_gpio_init &rArr; drv_gpio_set_trig
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_init
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_init
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[212]"></a>SystemInitPost</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(.text.SystemInitPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SystemInitPost &rArr; SystemInitPostLib &rArr; drv_cpft_uninit &rArr; drv_adc_control &rArr;  drv_adc_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_probe
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitPostLib
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>TIM0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.TIM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM0_IRQHandler &rArr; drv_tim_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tim_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.TIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_IRQHandler &rArr; drv_tim_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tim_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; drv_tim_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tim_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.TIM_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_IRQHandler &rArr; drv_usart_ex_isr &rArr; drv_usart_ex_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_ex_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_isr.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART1_IRQHandler &rArr; drv_usart_isr &rArr; drv_usart_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>VTRACK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_isr.o(.text.VTRACK_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VTRACK_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VTRACK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WDT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_isr.o(.text.WDT_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[57b]"></a>ancs_client_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ancs_client.o(.text.ancs_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ancs_client_init &rArr; cs_event_callback_reg &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_event_callback_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[580]"></a>ancs_data_evt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ancs_client.o(.text.ancs_data_evt))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_event_cb
</UL>

<P><STRONG><a name="[583]"></a>ancs_get_data</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ancs_client.o(.text.ancs_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ancs_get_data &rArr; ancs_get_pending_data &rArr; ancs_set_state &rArr;  ancs_set_state (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_get_pending_data
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_notify_evt
</UL>

<P><STRONG><a name="[57c]"></a>ancs_notify_evt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ancs_client.o(.text.ancs_notify_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ancs_notify_evt &rArr; ancs_get_data &rArr; ancs_get_pending_data &rArr; ancs_set_state &rArr;  ancs_set_state (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_event_cb
</UL>

<P><STRONG><a name="[586]"></a>app_24g_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app_24g.o(.text.app_24g_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = app_24g_init &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_read_int
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_register_event_callback
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_init
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_bb_frame_ongoing_callback_register
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_timer_register_isr_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[58b]"></a>app_adv_evt_disconnected_ind_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_adv.o(.text.app_adv_evt_disconnected_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = app_adv_evt_disconnected_ind_handler &rArr; OUTLINED_FUNCTION_0 &rArr; cs_gap_adv_start &rArr; [Anonymous Symbol] &rArr; ob_pointer_expand &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_event_cb
</UL>

<P><STRONG><a name="[58c]"></a>app_adv_init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, app_adv.o(.text.app_adv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_adv_init &rArr; cs_gap_adv_start &rArr; [Anonymous Symbol] &rArr; ob_pointer_expand &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_adv_start
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_get
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_event_callback_reg
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[58e]"></a>app_chipsea_dfu_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, service_chipsea_dfu.o(.text.app_chipsea_dfu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_chipsea_dfu_init &rArr; cs_event_callback_reg &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_chipsea_dfu_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_event_callback_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[590]"></a>app_chipsea_dfu_update_end_ind_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, service_chipsea_dfu.o(.text.app_chipsea_dfu_update_end_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_chipsea_dfu_update_end_ind_handler &rArr; cs_gap_disconnect &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_chipsea_dfu_evt_cb
</UL>

<P><STRONG><a name="[5ac]"></a>app_chipsea_dfu_update_prog_ind_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, service_chipsea_dfu.o(.text.app_chipsea_dfu_update_prog_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_prog_ind_handler
</UL>

<P><STRONG><a name="[591]"></a>app_chipsea_dfu_update_start_ind_handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, service_chipsea_dfu.o(.text.app_chipsea_dfu_update_start_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_chipsea_dfu_update_start_ind_handler &rArr; cs_gap_conn_param_update &rArr; ob_gap_conn_param_request &rArr; ebh_l2cap_conn_parameters_update_request &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_conn_param_update
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_begin_ind_handler
</UL>

<P><STRONG><a name="[592]"></a>app_sec_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_sec.o(.text.app_sec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_sec_init &rArr; cs_event_callback_reg &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_event_callback_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[594]"></a>board_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, board_cst92f41_evb.o(.text.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = board_init &rArr; drv_rcc_clock_set &rArr; rcc_clk_usart_div_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_init
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_init
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_pin_driven_current_set
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_pin_mode_set
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_set
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_dcdc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[213]"></a>chipsea_fault</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, adapter.o(.text.chipsea_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chipsea_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftFault_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[520]"></a>cs_24g_control</STRONG> (Thumb, 1236 bytes, Stack size 32 bytes, drv_24g.o(.text.cs_24g_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cs_24g_control &rArr; cs_24g_switch_role
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_switch_role
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_ana_enable
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_init
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_24g_ble_bb_frame_ongoing_handler
</UL>

<P><STRONG><a name="[59e]"></a>cs_24g_detection_mode</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, drv_24g.o(.text.cs_24g_detection_mode))
<BR><BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_init
</UL>

<P><STRONG><a name="[589]"></a>cs_24g_init</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, drv_24g.o(.text.cs_24g_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cs_24g_init &rArr; cs_24g_control &rArr; cs_24g_switch_role
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_control
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_detection_mode
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_rf_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_24g_init
</UL>

<P><STRONG><a name="[58a]"></a>cs_24g_register_event_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_24g.o(.text.cs_24g_register_event_callback))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_24g_init
</UL>

<P><STRONG><a name="[5a2]"></a>cs_24g_set_freq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, drv_24g.o(.text.cs_24g_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cs_24g_set_freq &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_rf_parameters
</UL>

<P><STRONG><a name="[52f]"></a>cs_24g_set_rate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_24g.o(.text.cs_24g_set_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs_24g_set_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_rf_parameters
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[59f]"></a>cs_24g_set_rf_parameters</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, drv_24g.o(.text.cs_24g_set_rf_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cs_24g_set_rf_parameters &rArr; cs_24g_set_freq &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_freq
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_rate
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_deviation
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_init
</UL>

<P><STRONG><a name="[4c9]"></a>cs_ble_mem_heap_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cs_ble_mem_heap.o(.text.cs_ble_mem_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs_ble_mem_heap_init &rArr; cs_ble_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
</UL>

<P><STRONG><a name="[351]"></a>cs_crc16_ccitt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cs_utils.o(.text.cs_crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs_crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_cmd
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[611]"></a>cs_list_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cs_list.o(.text.cs_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_sche
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_insert_to_pending_list
</UL>

<P><STRONG><a name="[5a9]"></a>cs_list_add_front</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cs_list.o(.text.cs_list_add_front))
<BR><BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_insert_before
</UL>

<P><STRONG><a name="[60c]"></a>cs_list_extract</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cs_list.o(.text.cs_list_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs_list_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_set_tick
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_extract_from_pending_list
</UL>

<P><STRONG><a name="[5a7]"></a>cs_list_find</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cs_list.o(.text.cs_list_find))
<BR><BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_find
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_sche
</UL>

<P><STRONG><a name="[60f]"></a>cs_list_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs_list.o(.text.cs_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_init
</UL>

<P><STRONG><a name="[5a8]"></a>cs_list_insert_before</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cs_list.o(.text.cs_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs_list_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_add_front
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_insert_to_pending_list
</UL>

<P><STRONG><a name="[612]"></a>cs_list_pop</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cs_list.o(.text.cs_list_pop))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_sche
</UL>

<P><STRONG><a name="[86]"></a>cs_log</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cs_log.o(.text.cs_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_callback
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_data
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_cmd
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_event_cb
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_24g_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_0_handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTestTask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_wakeup_isr_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_isr_handler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> app_sec.o(.text.app_sec_event_cb)
<LI> drv_24g.o(.text.cs_24g_control)
<LI> adapter.o(.text.chipsea_fault)
</UL>
<P><STRONG><a name="[59b]"></a>cs_printf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, cs_printf.o(.text.cs_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = cs_printf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_evt_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem32w
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem32r
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_line
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_commands
</UL>

<P><STRONG><a name="[56f]"></a>cs_putchar</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cs_printf.o(.text.cs_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cs_putchar &rArr; shell_out &rArr; drv_usart_ex_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_out
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_char
</UL>

<P><STRONG><a name="[5aa]"></a>cs_vprintf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cs_printf.o(.text.cs_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>

<P><STRONG><a name="[5b1]"></a>dfu_reset</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, chipsea_dfu.o(.text.dfu_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_chipsea_dfu_evt_cb
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_version_char
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_cmd
</UL>

<P><STRONG><a name="[5ae]"></a>dfu_write_cmd</STRONG> (Thumb, 1592 bytes, Stack size 160 bytes, chipsea_dfu.o(.text.dfu_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = dfu_write_cmd &rArr; OUTLINED_FUNCTION_0 &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_crc16_ccitt
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_reset
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_crc32
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_img_address
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_env_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_chipsea_dfu_evt_cb
</UL>

<P><STRONG><a name="[5b2]"></a>dfu_write_data</STRONG> (Thumb, 640 bytes, Stack size 88 bytes, chipsea_dfu.o(.text.dfu_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = dfu_write_data &rArr; OUTLINED_FUNCTION_0 &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_crc32
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_img_address
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_chipsea_dfu_evt_cb
</UL>

<P><STRONG><a name="[5b3]"></a>dfu_write_version_char</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, chipsea_dfu.o(.text.dfu_write_version_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dfu_write_version_char &rArr; dfu_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_reset
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_env_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_chipsea_dfu_evt_cb
</UL>

<P><STRONG><a name="[20a]"></a>drv_adc_control</STRONG> (Thumb, 1044 bytes, Stack size 152 bytes, drv_adc.o(.text.drv_adc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + In Cycle
<LI>Call Chain = drv_adc_control &rArr;  drv_adc_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_ana_enable
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_read
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_init
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_get_channel_data
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_init
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rc_rf_temperature_check
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_uninit
</UL>

<P><STRONG><a name="[5b4]"></a>drv_adc_init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, drv_adc.o(.text.drv_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = drv_adc_init &rArr;  drv_adc_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[512]"></a>drv_adc_isr</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, drv_adc.o(.text.drv_adc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_adc_isr &rArr; drv_adc_convert_channel_data &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[5b5]"></a>drv_adc_read</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, drv_adc.o(.text.drv_adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = drv_adc_read &rArr; drv_adc_convert_channel_data &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_get_channel_data
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[347]"></a>drv_aes128_hw_encrypt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_aes_hw.o(.text.drv_aes128_hw_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_aes128_hw_encrypt &rArr; aes_hw_encrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_hw_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_aes128
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llp_aes128_encrypt
</UL>

<P><STRONG><a name="[5be]"></a>drv_calib_rc32k</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_calib.o(.text.drv_calib_rc32k))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_calib_rc32k &rArr; drv_calib_rc32k_fast &rArr; drv_calib_rc32k_accuracy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_ana_enable
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rc32k_fast
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rc32k_full
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_32k_switch_to_rc
</UL>

<P><STRONG><a name="[5c1]"></a>drv_calib_rc32k_accuracy_check</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, drv_calib.o(.text.drv_calib_rc32k_accuracy_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_calib_rc32k_accuracy_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rc32k_fast
</UL>

<P><STRONG><a name="[5bf]"></a>drv_calib_rc32k_fast</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, drv_calib.o(.text.drv_calib_rc32k_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_calib_rc32k_fast &rArr; drv_calib_rc32k_accuracy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rc32k_full
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rc32k_accuracy_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rc32k
</UL>

<P><STRONG><a name="[5c0]"></a>drv_calib_rc32k_full</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, drv_calib.o(.text.drv_calib_rc32k_full))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rc32k
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rc32k_fast
</UL>

<P><STRONG><a name="[5c2]"></a>drv_calib_repair_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_calib_repair.o(.text.drv_calib_repair_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = drv_calib_repair_init &rArr; drv_adc_control &rArr;  drv_adc_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k_get
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_voltage_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rf_init
</UL>

<P><STRONG><a name="[20e]"></a>drv_calib_repair_rf_pll_temperature_repair</STRONG> (Thumb, 668 bytes, Stack size 20 bytes, drv_calib_repair.o(.text.drv_calib_repair_rf_pll_temperature_repair))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = drv_calib_repair_rf_pll_temperature_repair
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_patch
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rc_rf_temperature_check
</UL>

<P><STRONG><a name="[20d]"></a>drv_calib_rf</STRONG> (Thumb, 1604 bytes, Stack size 24 bytes, drv_calib.o(.text.drv_calib_rf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = drv_calib_rf &rArr; drv_calib_patch &rArr; drv_calib_repair_rf_pll_temperature_repair
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_ana_enable
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rf_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rc_rf_temperature_check
</UL>

<P><STRONG><a name="[5d8]"></a>drv_calib_sys_rc</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, drv_calib.o(.text.drv_calib_sys_rc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_calib_sys_rc
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_startup
</UL>

<P><STRONG><a name="[5da]"></a>drv_calib_sys_rc32m</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, drv_calib.o(.text.drv_calib_sys_rc32m))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_startup
</UL>

<P><STRONG><a name="[513]"></a>drv_dma_isr</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, drv_dma.o(.text.drv_dma_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_dma_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[34e]"></a>drv_efuse_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, drv_efuse.o(.text.drv_efuse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_efuse_init &rArr; drv_rcc_clock_get &rArr;  drv_rcc_clock_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_init
</UL>

<P><STRONG><a name="[353]"></a>drv_efuse_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_efuse.o(.text.drv_efuse_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_efuse_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[5d5]"></a>drv_gpio_control</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, drv_gpio.o(.text.drv_gpio_control))
<BR><BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_pin_wakeup_isr
</UL>

<P><STRONG><a name="[55e]"></a>drv_gpio_init</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, drv_gpio.o(.text.drv_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_gpio_init &rArr; drv_gpio_set_trig
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_set_trig
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[514]"></a>drv_gpio_isr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_gpio.o(.text.drv_gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_gpio_isr &rArr; drv_gpio_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_pin_wakeup_out_of_date
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_isr_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[5cd]"></a>drv_gpio_isr_callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_gpio.o(.text.drv_gpio_isr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_gpio_isr_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_isr
</UL>

<P><STRONG><a name="[618]"></a>drv_gpio_register_isr_callback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_gpio.o(.text.drv_gpio_register_isr_callback))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[5cc]"></a>drv_gpio_set_trig</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, drv_gpio.o(.text.drv_gpio_set_trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_gpio_set_trig
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_init
</UL>

<P><STRONG><a name="[515]"></a>drv_i2c_isr</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, drv_i2c.o(.text.drv_i2c_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_i2c_isr &rArr; drv_i2c_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_isr_callback
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[5d0]"></a>drv_i2c_isr_callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_i2c.o(.text.drv_i2c_isr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_i2c_isr_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_isr
</UL>

<P><STRONG><a name="[518]"></a>drv_lp_tim_isr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, drv_lp_tim.o(.text.drv_lp_tim_isr))
<BR><BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lp_tim_isr_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_TIMER_IRQHandler
</UL>

<P><STRONG><a name="[5d1]"></a>drv_lp_tim_isr_callback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_lp_tim.o(.text.drv_lp_tim_isr_callback))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lp_tim_isr
</UL>

<P><STRONG><a name="[55d]"></a>drv_pin_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drv_pinmux.o(.text.drv_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_pin_init &rArr; drv_pin_mux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_pin_driven_current_set
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_pin_mode_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_mux_set
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8f]"></a>drv_pin_mux_set</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_pinmux.o(.text.drv_pin_mux_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_pin_mux_set
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sf_sys.o(.text.drv_sfs_probe)
</UL>
<P><STRONG><a name="[207]"></a>drv_pmu_32k_switch_to_rc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_pmu.o(.text.drv_pmu_32k_switch_to_rc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = drv_pmu_32k_switch_to_rc &rArr; drv_calib_rc32k &rArr; drv_calib_rc32k_fast &rArr; drv_calib_rc32k_accuracy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rc32k
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_sleep_enter
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rng_get
</UL>

<P><STRONG><a name="[595]"></a>drv_pmu_dcdc_enable</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, drv_pmu.o(.text.drv_pmu_dcdc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_pmu_dcdc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[5d4]"></a>drv_pmu_force_reboot</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, drv_pmu.o(.text.drv_pmu_force_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_pmu_force_reboot &rArr; OUTLINED_FUNCTION_2 &rArr; drv_pmu_topclk_rc32m_power_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_rc32m
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_chipsea_dfu_evt_cb
</UL>

<P><STRONG><a name="[55c]"></a>drv_pmu_init</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, drv_pmu.o(.text.drv_pmu_init))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[598]"></a>drv_pmu_pin_driven_current_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_pmu.o(.text.drv_pmu_pin_driven_current_set))
<BR><BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_init
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[597]"></a>drv_pmu_pin_mode_set</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, drv_pmu.o(.text.drv_pmu_pin_mode_set))
<BR><BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_probe
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_init
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[54f]"></a>drv_pmu_pin_wakeup_isr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_pmu.o(.text.drv_pmu_pin_wakeup_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_pmu_pin_wakeup_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_control
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_WAKEUP_IRQHandler
</UL>

<P><STRONG><a name="[5ce]"></a>drv_pmu_pin_wakeup_out_of_date</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_pmu.o(.text.drv_pmu_pin_wakeup_out_of_date))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_isr
</UL>

<P><STRONG><a name="[661]"></a>drv_pmu_reboot_reason</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, drv_pmu.o(.text.drv_pmu_reboot_reason))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[209]"></a>drv_pmu_select_32k</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, drv_pmu.o(.text.drv_pmu_select_32k))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = drv_pmu_select_32k &rArr;  drv_pmu_select_32k (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_32k_switch_to_rc
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_sleep_leave
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rng_get
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rc32k_temperature_check
</UL>

<P><STRONG><a name="[556]"></a>drv_pmu_timer_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_pmu_timer.o(.text.drv_pmu_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfig
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[550]"></a>drv_pmu_timer_isr</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, drv_pmu_timer.o(.text.drv_pmu_timer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_pmu_timer_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_timer_isr_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_TIMER_IRQHandler
</UL>

<P><STRONG><a name="[5d6]"></a>drv_pmu_timer_isr_callback</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_pmu_timer.o(.text.drv_pmu_timer_isr_callback))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_timer_isr
</UL>

<P><STRONG><a name="[588]"></a>drv_pmu_timer_register_isr_callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_pmu_timer.o(.text.drv_pmu_timer_register_isr_callback))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_24g_init
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_init
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[20b]"></a>drv_pmu_topclk_recalib</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, drv_pmu.o(.text.drv_pmu_topclk_recalib), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = drv_pmu_topclk_recalib &rArr; drv_pmu_topclk_x2_enable &rArr; drv_pmu_register_step_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_fast_startup
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_sys_rc32m
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_sys_rc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_xtal32m_x2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_x2_enable
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_xtal32m
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_rc32m
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rc_rf_temperature_check
</UL>

<P><STRONG><a name="[34d]"></a>drv_pmu_topclk_switch_to_rc32m</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_pmu.o(.text.drv_pmu_topclk_switch_to_rc32m))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_force_reboot
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_fast_startup
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_startup
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rng_get
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_init
</UL>

<P><STRONG><a name="[5d9]"></a>drv_pmu_topclk_switch_to_xtal32m</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_pmu.o(.text.drv_pmu_topclk_switch_to_xtal32m))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_pmu_topclk_switch_to_xtal32m
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_fast_startup
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_startup
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rng_get
</UL>

<P><STRONG><a name="[5e3]"></a>drv_pmu_topclk_xtal32m_is_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_pmu.o(.text.drv_pmu_topclk_xtal32m_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rng_get
</UL>

<P><STRONG><a name="[5dc]"></a>drv_pmu_topclk_xtal32m_power_enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_pmu.o(.text.drv_pmu_topclk_xtal32m_power_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_pmu_topclk_xtal32m_power_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_xtal32m_wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_fast_startup
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_startup
</UL>

<P><STRONG><a name="[619]"></a>drv_pmu_wakeup_pin_register_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_pmu.o(.text.drv_pmu_wakeup_pin_register_callback))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[5dd]"></a>drv_pmu_wakeup_pin_set</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, drv_pmu.o(.text.drv_pmu_wakeup_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_pmu_wakeup_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_wakeup_pin_wait_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[559]"></a>drv_pmu_xtal32m_change_param</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_pmu.o(.text.drv_pmu_xtal32m_change_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = drv_pmu_xtal32m_change_param &rArr; drv_pmu_register_step_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_register_step_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfig
</UL>

<P><STRONG><a name="[5d7]"></a>drv_pmu_xtal32m_fast_startup</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, drv_pmu.o(.text.drv_pmu_xtal32m_fast_startup), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_pmu_xtal32m_fast_startup &rArr; OUTLINED_FUNCTION_0 &rArr; drv_rcc_clock_get &rArr;  drv_rcc_clock_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_xtal32m_power_enable
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_xtal32m
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_rc32m
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
</UL>

<P><STRONG><a name="[55a]"></a>drv_pmu_xtal32m_startup</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, drv_pmu.o(.text.drv_pmu_xtal32m_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_pmu_xtal32m_startup &rArr; OUTLINED_FUNCTION_0 &rArr; drv_rcc_clock_get &rArr;  drv_rcc_clock_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_sys_rc32m
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_sys_rc
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_xtal32m_power_enable
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_xtal32m_wait_ready
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_xtal32m
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_rc32m
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfig
</UL>

<P><STRONG><a name="[a0]"></a>drv_rcc_clock_get</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, drv_rcc.o(.text.drv_rcc_clock_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = drv_rcc_clock_get &rArr;  drv_rcc_clock_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_get
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_clk_search
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_efuse_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_get
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_ex_config_mode_baudrate
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.vPortSetupTimerInterrupt)
</UL>
<P><STRONG><a name="[596]"></a>drv_rcc_clock_set</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, drv_rcc.o(.text.drv_rcc_clock_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = drv_rcc_clock_set &rArr; rcc_clk_usart_div_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_clk_usart_div_set
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_clk_search
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_ex_config_mode_baudrate
</UL>

<P><STRONG><a name="[5e0]"></a>drv_rf_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_radio.o(.text.drv_rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = drv_rf_init &rArr; drv_calib_repair_init &rArr; drv_adc_control &rArr;  drv_adc_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_init
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rf_tx_power_set
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[5e1]"></a>drv_rf_tx_power_set</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, drv_radio.o(.text.drv_rf_tx_power_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = drv_rf_tx_power_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rf_init
</UL>

<P><STRONG><a name="[557]"></a>drv_rng_get</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, drv_rng.o(.text.drv_rng_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = drv_rng_get &rArr; drv_pmu_select_32k &rArr;  drv_pmu_select_32k (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_xtal32m
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_32k_switch_to_rc
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_rc32m
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_rc32m_power_enable
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_xtal32m_is_enabled
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k_get
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_modify_rc32k_rctune
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfig
</UL>

<P><STRONG><a name="[552]"></a>drv_rtc_alarm_isr</STRONG> (Thumb, 72 bytes, Stack size 88 bytes, drv_rtc.o(.text.drv_rtc_alarm_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = drv_rtc_alarm_isr &rArr; drv_rtc_timer_get &rArr; OUTLINED_FUNCTION_1 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_timer_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AF_IRQHandler
</UL>

<P><STRONG><a name="[551]"></a>drv_rtc_second_isr</STRONG> (Thumb, 44 bytes, Stack size 72 bytes, drv_rtc.o(.text.drv_rtc_second_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = drv_rtc_second_isr &rArr; drv_rtc_timer_get &rArr; OUTLINED_FUNCTION_1 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_timer_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_1HZ_IRQHandler
</UL>

<P><STRONG><a name="[5e5]"></a>drv_rtc_timer_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_rtc.o(.text.drv_rtc_timer_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_rtc_timer_get &rArr; OUTLINED_FUNCTION_1 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_alarm_isr
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_second_isr
</UL>

<P><STRONG><a name="[4ac]"></a>drv_sf_capacity</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drv_sf.o(.text.drv_sf_capacity))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
</UL>

<P><STRONG><a name="[5e6]"></a>drv_sf_deep_power_down_leave</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, drv_sf.o(.text.drv_sf_deep_power_down_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_sf_deep_power_down_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_nodma
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_probe
</UL>

<P><STRONG><a name="[522]"></a>drv_sf_detect</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, drv_sf.o(.text.drv_sf_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = drv_sf_detect &rArr; drv_sf_read_id_safe &rArr; drv_sf_read_id
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_iflash_auto_powerdown_in_sleep_enable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_id_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[5eb]"></a>drv_sf_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_sf.o(.text.drv_sf_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = drv_sf_disable &rArr; drv_sf_iflash_power_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_iflash_power_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_probe
</UL>

<P><STRONG><a name="[599]"></a>drv_sf_enable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_sf.o(.text.drv_sf_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv_sf_enable &rArr; drv_sf_iflash_power_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_enable
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_iflash_power_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_enable_flash
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_probe
</UL>

<P><STRONG><a name="[4c6]"></a>drv_sf_erase</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, drv_sf.o(.text.drv_sf_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase_sector
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_erase_flash
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_erase_write_sector_verify
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[537]"></a>drv_sf_erase_sector</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, drv_sf.o(.text.drv_sf_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
</UL>

<P><STRONG><a name="[5ea]"></a>drv_sf_iflash_auto_powerdown_in_sleep_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_sf.o(.text.drv_sf_iflash_auto_powerdown_in_sleep_enable))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_detect
</UL>

<P><STRONG><a name="[600]"></a>drv_sf_iflash_power_ctrl_immediate_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_sf.o(.text.drv_sf_iflash_power_ctrl_immediate_enable))
<BR><BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_probe
</UL>

<P><STRONG><a name="[206]"></a>drv_sf_quad_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_sf.o(.text.drv_sf_quad_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = drv_sf_quad_enable &rArr; drv_sf_write_sr_mask_16bits &rArr; drv_sf_write_sr_16bits &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_mask_16bits
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_config
</UL>

<P><STRONG><a name="[216]"></a>drv_sf_read</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, drv_sf.o(.text.drv_sf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_sf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_get_flash
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_sector_is_ok
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_read_sector_verify
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[8d]"></a>drv_sf_read_fast_dma</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, drv_sf.o(.text.drv_sf_read_fast_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_sf_read_fast_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_read_dma
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sf.o(.text.drv_sf_read)
</UL>
<P><STRONG><a name="[8e]"></a>drv_sf_read_fast_dual_dma</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, drv_sf.o(.text.drv_sf_read_fast_dual_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_sf_read_fast_dual_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_read_dma
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sf.o(.text.drv_sf_read)
</UL>
<P><STRONG><a name="[8c]"></a>drv_sf_read_fast_quad_dma</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, drv_sf.o(.text.drv_sf_read_fast_quad_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_sf_read_fast_quad_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_read_dma
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sf.o(.text.drv_sf_read)
</UL>
<P><STRONG><a name="[54b]"></a>drv_sf_read_sr_16bits</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_sf.o(.text.drv_sf_read_sr_16bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_sf_read_sr_16bits &rArr; drv_sf_read_sr2
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_sr2
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>

<P><STRONG><a name="[215]"></a>drv_sf_read_uid_ex</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, drv_sf.o(.text.drv_sf_read_uid_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_sf_read_uid_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_read_nodma
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[5ff]"></a>drv_sf_status</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_sf.o(.text.drv_sf_status))
<BR><BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_probe
</UL>

<P><STRONG><a name="[4c3]"></a>drv_sf_write</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, drv_sf.o(.text.drv_sf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = drv_sf_write &rArr; drv_sf_write_page
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_put_flash
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_write_sector_noverify
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_erase_write_sector_verify
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[5f5]"></a>drv_sf_write_enable</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, drv_sf.o(.text.drv_sf_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_sf_write_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_nodma
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_begin
</UL>

<P><STRONG><a name="[5f4]"></a>drv_sf_write_page</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_sf.o(.text.drv_sf_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_sf_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write
</UL>

<P><STRONG><a name="[5f6]"></a>drv_sf_write_page_dma</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, drv_sf.o(.text.drv_sf_write_page_dma), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_begin
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_end
</UL>

<P><STRONG><a name="[5f7]"></a>drv_sf_write_sr_16bits</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, drv_sf.o(.text.drv_sf_write_sr_16bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_sf_write_sr_16bits &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_end
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_mask_16bits
</UL>

<P><STRONG><a name="[5f1]"></a>drv_sf_write_sr_mask_16bits</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, drv_sf.o(.text.drv_sf_write_sr_mask_16bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = drv_sf_write_sr_mask_16bits &rArr; drv_sf_write_sr_16bits &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_16bits
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_quad_enable
</UL>

<P><STRONG><a name="[55b]"></a>drv_sfs_config</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_sf_sys.o(.text.drv_sfs_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = drv_sfs_config &rArr; drv_sf_config &rArr; drv_sf_quad_enable &rArr; drv_sf_write_sr_mask_16bits &rArr; drv_sf_write_sr_16bits &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfig
</UL>

<P><STRONG><a name="[4aa]"></a>drv_sfs_cur_obj</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_sf_sys.o(.text.drv_sfs_cur_obj))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_erase_flash
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_enable_flash
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_write_sector_noverify
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_erase_write_sector_verify
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_sector_is_ok
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_read_sector_verify
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4ab]"></a>drv_sfs_located</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_sf_sys.o(.text.drv_sfs_located))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_erase_flash
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_put_flash
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_get_flash
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_enable_flash
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_sector_is_ok
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[55f]"></a>drv_sfs_probe</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, drv_sf_sys.o(.text.drv_sfs_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = drv_sfs_probe &rArr; drv_sf_config &rArr; drv_sf_quad_enable &rArr; drv_sf_write_sr_mask_16bits &rArr; drv_sf_write_sr_16bits &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_enable
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_status
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_pin_mode_set
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_disable
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_iflash_power_ctrl_immediate_enable
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_deep_power_down_leave
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_config
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitPost
</UL>

<P><STRONG><a name="[554]"></a>drv_spi_isr</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, drv_spi.o(.text.drv_spi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_spi_isr &rArr; drv_spi_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_resource
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_isr_callback
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[603]"></a>drv_spi_isr_callback</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, drv_spi.o(.text.drv_spi_isr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_spi_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_isr
</UL>

<P><STRONG><a name="[560]"></a>drv_tim_isr</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, drv_tim.o(.text.drv_tim_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_tim_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_get_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[605]"></a>drv_usart_ex_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, drv_usart_ex.o(.text.drv_usart_ex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drv_usart_ex_init &rArr; usart_ex_config_mode_baudrate &rArr; drv_rcc_clock_set &rArr; rcc_clk_usart_div_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_ex_config_mode_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
</UL>

<P><STRONG><a name="[562]"></a>drv_usart_ex_isr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_usart_ex.o(.text.drv_usart_ex_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_usart_ex_isr &rArr; drv_usart_ex_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_ex_isr_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[607]"></a>drv_usart_ex_isr_callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_usart_ex.o(.text.drv_usart_ex_isr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_usart_ex_isr_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_ex_isr
</UL>

<P><STRONG><a name="[65e]"></a>drv_usart_ex_register_isr_callback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_usart_ex.o(.text.drv_usart_ex_register_isr_callback))
<BR><BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
</UL>

<P><STRONG><a name="[65f]"></a>drv_usart_ex_write</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, drv_usart_ex.o(.text.drv_usart_ex_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_usart_ex_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_out
</UL>

<P><STRONG><a name="[563]"></a>drv_usart_isr</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, drv_usart.o(.text.drv_usart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_usart_isr &rArr; drv_usart_isr_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_isr_callback
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_rx_line_int_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[609]"></a>drv_usart_isr_callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_usart.o(.text.drv_usart_isr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_usart_isr_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_isr
</UL>

<P><STRONG><a name="[617]"></a>drv_wdt_enable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_wdt.o(.text.drv_wdt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[564]"></a>drv_wdt_isr</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, drv_wdt.o(.text.drv_wdt_isr))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[666]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(.text.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[4cb]"></a>evt_callback_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, evt.o(.text.evt_callback_set))
<BR><BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_bc_init
</UL>

<P><STRONG><a name="[60a]"></a>evt_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, evt.o(.text.evt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[663]"></a>evt_schedule_trigger_callback_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evt.o(.text.evt_schedule_trigger_callback_set))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[60e]"></a>evt_timer_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, evt_timer.o(.text.evt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_timer_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_timer_register_isr_callback
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_init
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[613]"></a>evt_timer_set</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, evt_timer.o(.text.evt_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = evt_timer_set &rArr; evt_timer_set_tick &rArr; evt_timer_insert_to_pending_list &rArr; cs_list_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_set_tick
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[614]"></a>evt_timer_set_tick</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, evt_timer.o(.text.evt_timer_set_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = evt_timer_set_tick &rArr; evt_timer_insert_to_pending_list &rArr; cs_list_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_extract
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_hw_prog
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_insert_to_pending_list
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_extract_from_pending_list
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_set
</UL>

<P><STRONG><a name="[65b]"></a>gatt_service_init</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, service_common.o(.text.gatt_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatt_service_init
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_common_init
</UL>

<P><STRONG><a name="[34]"></a>$Super$$main</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = $Super$$main &rArr; shell_init &rArr; cs_printf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEvtTask
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rf_init
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_notify_user_callback_register
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_wakeup_pin_register_callback
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_wakeup_pin_set
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_register_isr_callback
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_wdt_enable
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_init
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[621]"></a>mbr_probe</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mbr.o(.text.mbr_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbr_probe &rArr; mbr_sf_erase_write_sector_verify &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_erase_write_sector_verify
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_read_sector_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write_part
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read_part
</UL>

<P><STRONG><a name="[4a9]"></a>mbr_read_part</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, mbr.o(.text.mbr_read_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbr_read_part &rArr; mbr_probe &rArr; mbr_sf_erase_write_sector_verify &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_probe
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_read_sector_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_get_mbr
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[59a]"></a>mbr_write_part</STRONG> (Thumb, 220 bytes, Stack size 568 bytes, mbr.o(.text.mbr_write_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = mbr_write_part &rArr; mbr_probe &rArr; mbr_sf_erase_write_sector_verify &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_probe
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_write_sector_noverify
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_read_sector_verify
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_put_mbr
</UL>

<P><STRONG><a name="[625]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os2.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTestTask
</UL>

<P><STRONG><a name="[628]"></a>osEventFlagsNew</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cmsis_os2.o(.text.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osEventFlagsNew &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[62b]"></a>osEventFlagsSet</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cmsis_os2.o(.text.osEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_1 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtEventHandler
</UL>

<P><STRONG><a name="[62f]"></a>osEventFlagsWait</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cmsis_os2.o(.text.osEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osEventFlagsWait &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[61f]"></a>osKernelGetState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmsis_os2.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[672]"></a>osKernelGetTickFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(.text.osKernelGetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTestTask
</UL>

<P><STRONG><a name="[61c]"></a>osKernelInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cmsis_os2.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osKernelInitialize &rArr; vPortDefineHeapRegions
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Context
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDefineHeapRegions
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[620]"></a>osKernelStart</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cmsis_os2.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Context
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[61e]"></a>osThreadNew</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Context
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEvtTask
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[635]"></a>osTimerNew</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = osTimerNew &rArr; xTimerCreateStatic &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Context
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTestTask
</UL>

<P><STRONG><a name="[63a]"></a>osTimerStart</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cmsis_os2.o(.text.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osTimerStart &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTestTask
</UL>

<P><STRONG><a name="[555]"></a>pm_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pm.o(.text.pm_init))
<BR><BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_SystemFromRomExitDeepSleepEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfig
</UL>

<P><STRONG><a name="[4cf]"></a>pm_sleep_allow</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pm.o(.text.pm_sleep_allow))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_callback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_bb_frame_ongoing
</UL>

<P><STRONG><a name="[21b]"></a>pm_sleep_checker_callback_register</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, pm.o(.text.pm_sleep_checker_callback_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pm_sleep_checker_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_init
</UL>

<P><STRONG><a name="[662]"></a>pm_sleep_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pm.o(.text.pm_sleep_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[61a]"></a>pm_sleep_notify_user_callback_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pm.o(.text.pm_sleep_notify_user_callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[4ce]"></a>pm_sleep_prevent</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pm.o(.text.pm_sleep_prevent))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_callback
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_bb_frame_ongoing
</UL>

<P><STRONG><a name="[21c]"></a>pm_sleep_store_restore_callback_register</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pm.o(.text.pm_sleep_store_restore_callback_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pm_sleep_store_restore_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_init
</UL>

<P><STRONG><a name="[636]"></a>pvPortMalloc</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, heap_5.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[561]"></a>pvTimerGetTimerID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text.pvTimerGetTimerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[650]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[85]"></a>service_chipsea_dfu_evt_cb</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, service_chipsea_dfu.o(.text.service_chipsea_dfu_evt_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = service_chipsea_dfu_evt_cb &rArr; dfu_write_cmd &rArr; OUTLINED_FUNCTION_0 &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gatts_send_hvx
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_chipsea_dfu_update_end_ind_handler
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_force_reboot
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_response
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_version_char
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_data
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_cmd
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_chipsea_dfu.o(.text.app_chipsea_dfu_init)
</UL>
<P><STRONG><a name="[58f]"></a>service_chipsea_dfu_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, service_chipsea_dfu.o(.text.service_chipsea_dfu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_chipsea_dfu_init &rArr; cs_gatts_add_service &rArr; ebh_gatts_add_service &rArr; ebh_att_db_add
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gatts_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_chipsea_dfu_init
</UL>

<P><STRONG><a name="[65a]"></a>service_common_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, service_common.o(.text.service_common_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = service_common_init &rArr; cs_event_callback_reg &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_service_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_event_callback_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvtScheduleTask
</UL>

<P><STRONG><a name="[65c]"></a>shell_get_line</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, shell.o(.text.shell_get_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = shell_get_line &rArr; cs_printf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_out
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_evt_handler
</UL>

<P><STRONG><a name="[61b]"></a>shell_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, shell_port.o(.text.shell_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = shell_init &rArr; cs_printf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_ex_register_isr_callback
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_ex_init
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_callback_set
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_printf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[65d]"></a>shell_main</STRONG> (Thumb, 160 bytes, Stack size 352 bytes, shell.o(.text.shell_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = shell_main &rArr; list_commands &rArr; cs_printf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_printf
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_commands
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdexec
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_evt_handler
</UL>

<P><STRONG><a name="[9b]"></a>shell_out</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, shell_port.o(.text.shell_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shell_out &rArr; drv_usart_ex_write
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_ex_write
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_line
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.shell_get_line)
</UL>
<P><STRONG><a name="[529]"></a>uxListRemove</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[674]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[66f]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[67e]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[660]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmsis_os2.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[a5]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, event_groups.o(.text.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(.text.xEventGroupSetBitsFromISR)
</UL>
<P><STRONG><a name="[98]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.prvAddNewTaskToReadyList)
</UL>
<P><STRONG><a name="[64f]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[63e]"></a>vListInsert</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[535]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[631]"></a>vPortDefineHeapRegions</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, heap_5.o(.text.vPortDefineHeapRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vPortDefineHeapRegions
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[52b]"></a>vPortEnterCritical</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[641]"></a>vPortExitCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[639]"></a>vPortFree</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, heap_5.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[664]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortSetupTimerInterrupt &rArr; vSleepTimerSetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_timer_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_timer_register_isr_callback
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSleepTimerSetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[64a]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, port.o(.text.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; pm_power_manage &rArr; pm_sleep &rArr; pm_sleep_enter_light_sleep &rArr; pm_sleep_enter_common_sleep &rArr; drv_pmu_sleep_enter &rArr; drv_pmu_32k_switch_to_rc &rArr; drv_calib_rc32k &rArr; drv_calib_rc32k_fast &rArr; drv_calib_rc32k_accuracy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_power_manage
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSleepTimerSetTick
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[67b]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[656]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[61d]"></a>vStartEvtTask</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, evt_task.o(.text.vStartEvtTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vStartEvtTask &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[627]"></a>vTaskDelay</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[678]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[658]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[533]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[66a]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[66c]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[66d]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(.text.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskRemoveFromUnorderedEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[632]"></a>vTaskStartScheduler</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[667]"></a>vTaskStepTick</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.vTaskStepTick))
<BR><BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[655]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1dc]"></a>vTaskSwitchContext</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[62a]"></a>xEventGroupCreate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[629]"></a>xEventGroupCreateStatic</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xEventGroupCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[62e]"></a>xEventGroupSetBits</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, event_groups.o(.text.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
</UL>

<P><STRONG><a name="[62c]"></a>xEventGroupSetBitsFromISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, event_groups.o(.text.xEventGroupSetBitsFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_1 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[630]"></a>xEventGroupWaitBits</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, event_groups.o(.text.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>

<P><STRONG><a name="[671]"></a>xPortStartScheduler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt &rArr; vSleepTimerSetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[66b]"></a>xPortSysTickHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(.text.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSleepTimerOverflowHandler
</UL>

<P><STRONG><a name="[644]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[64d]"></a>xQueueGenericReset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[677]"></a>xQueueGenericSend</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[67a]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_1 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[657]"></a>xQueueReceive</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[679]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[634]"></a>xTaskCreate</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[633]"></a>xTaskCreateStatic</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[517]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSleepTimerOverflowHandler
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Context
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[654]"></a>xTaskGetTickCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[676]"></a>xTaskIncrementTick</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[647]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_1 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[545]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[64b]"></a>xTaskResumeAll</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[638]"></a>xTimerCreate</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, timers.o(.text.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[637]"></a>xTimerCreateStatic</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, timers.o(.text.xTimerCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerCreateStatic &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[670]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[63b]"></a>xTimerGenericCommand</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[673]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, timers.o(.text.xTimerPendFunctionCallFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_1 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
</UL>

<P><STRONG><a name="[4f7]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[691]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[692]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[693]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[694]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[571]"></a>_strtok</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, shell.o(.text._strtok))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _strtok &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
</UL>

<P><STRONG><a name="[59c]"></a>cmdexec</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, shell.o(.text.cmdexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmdexec &rArr; strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
</UL>

<P><STRONG><a name="[615]"></a>list_commands</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, shell.o(.text.list_commands))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = list_commands &rArr; cs_printf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_printf
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
</UL>

<P><STRONG><a name="[19e]"></a>cmd_mem32r</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, shell_cmd.o(.text.cmd_mem32r))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = cmd_mem32r &rArr; cs_printf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_printf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_cmd.o(.rodata.shell_cmd)
</UL>
<P><STRONG><a name="[19f]"></a>cmd_mem32w</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, shell_cmd.o(.text.cmd_mem32w))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = cmd_mem32w &rArr; cs_printf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_printf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_cmd.o(.rodata.shell_cmd)
</UL>
<P><STRONG><a name="[9c]"></a>shell_evt_handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, shell_port.o(.text.shell_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = shell_evt_handler &rArr; shell_main &rArr; list_commands &rArr; cs_printf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_clear
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_line
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_printf
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_port.o(.text.shell_init)
</UL>
<P><STRONG><a name="[9d]"></a>shell_usart_cb</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, shell_port.o(.text.shell_usart_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shell_usart_cb &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_set
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_port.o(.text.shell_init)
</UL>
<P><STRONG><a name="[622]"></a>mbr_sf_read_sector_verify</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, mbr.o(.text.mbr_sf_read_sector_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbr_sf_read_sector_verify &rArr; mbr_sf_sector_is_ok &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_cur_obj
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_sector_is_ok
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write_part
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read_part
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_probe
</UL>

<P><STRONG><a name="[538]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbr.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_located
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_write_sector_noverify
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_erase_write_sector_verify
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_read_sector_verify
</UL>

<P><STRONG><a name="[623]"></a>mbr_sf_sector_is_ok</STRONG> (Thumb, 92 bytes, Stack size 104 bytes, mbr.o(.text.mbr_sf_sector_is_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbr_sf_sector_is_ok &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_located
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_cur_obj
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_erase_write_sector_verify
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_read_sector_verify
</UL>

<P><STRONG><a name="[51a]"></a>mbr_sf_erase_write_sector_verify</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, mbr.o(.text.mbr_sf_erase_write_sector_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbr_sf_erase_write_sector_verify &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_cur_obj
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_sector_is_ok
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_probe
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[519]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mbr.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; mbr_sf_erase_write_sector_verify &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_sf_erase_write_sector_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write_part
</UL>

<P><STRONG><a name="[624]"></a>mbr_sf_write_sector_noverify</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mbr.o(.text.mbr_sf_write_sector_noverify))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbr_sf_write_sector_noverify &rArr; drv_sf_write &rArr; drv_sf_write_page
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_cur_obj
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write_part
</UL>

<P><STRONG><a name="[1a6]"></a>evt_ctz</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evt.o(RAM_CODE.PM))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_schedule
</UL>

<P><STRONG><a name="[60b]"></a>evt_timer_extract_from_pending_list</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evt_timer.o(.text.evt_timer_extract_from_pending_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_timer_extract_from_pending_list &rArr; cs_list_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_set_tick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_sche
</UL>

<P><STRONG><a name="[610]"></a>evt_timer_insert_to_pending_list</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, evt_timer.o(.text.evt_timer_insert_to_pending_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = evt_timer_insert_to_pending_list &rArr; cs_list_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_add
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_set_tick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_sche
</UL>

<P><STRONG><a name="[60d]"></a>evt_timer_hw_prog</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, evt_timer.o(.text.evt_timer_hw_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evt_timer_hw_prog
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_set_tick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_sche
</UL>

<P><STRONG><a name="[90]"></a>evt_timer_overflow_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, evt_timer.o(.text.evt_timer_overflow_handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evt_timer.o(.text.evt_timer_init)
</UL>
<P><STRONG><a name="[91]"></a>evt_timer_sche</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, evt_timer.o(.text.evt_timer_sche))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = evt_timer_sche &rArr; evt_timer_insert_to_pending_list &rArr; cs_list_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_find
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_pop
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_list_add
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_hw_prog
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_insert_to_pending_list
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_extract_from_pending_list
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evt_timer.o(.text.evt_timer_init)
</UL>
<P><STRONG><a name="[93]"></a>drv_gpio_isr_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.drv_gpio_isr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = drv_gpio_isr_handler &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[94]"></a>drv_pin_wakeup_isr_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.drv_pin_wakeup_isr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = drv_pin_wakeup_isr_handler &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[95]"></a>pm_sleep_notify_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.pm_sleep_notify_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[96]"></a>vTestTask</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, main.o(.text.vTestTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = vTestTask &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[a4]"></a>vTimerCallback</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text.vTimerCallback))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.vTestTask)
</UL>
<P><STRONG><a name="[a2]"></a>vEvtScheduleTask</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, evt_task.o(.text.vEvtScheduleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = vEvtScheduleTask &rArr; app_24g_init &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_allow
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_enable
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_reboot_reason
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_24g_init
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_client_init
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_chipsea_dfu_init
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_common_init
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_init
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_timer_set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_schedule
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_schedule_trigger_callback_set
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read_part
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evt_task.o(.text.vStartEvtTask)
</UL>
<P><STRONG><a name="[9e]"></a>evt_timer_0_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, evt_task.o(.text.evt_timer_0_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = evt_timer_0_handler &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evt_task.o(.text.vEvtScheduleTask)
</UL>
<P><STRONG><a name="[9f]"></a>vEvtEventHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, evt_task.o(.text.vEvtEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vEvtEventHandler &rArr; osEventFlagsSet &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_1 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evt_task.o(.text.vEvtScheduleTask)
</UL>
<P><STRONG><a name="[84]"></a>app_adv_event_cb</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, app_adv.o(.text.app_adv_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = app_adv_event_cb &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_evt_disconnected_ind_handler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_adv.o(.text.app_adv_init)
</UL>
<P><STRONG><a name="[51b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_adv.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; cs_gap_adv_start &rArr; [Anonymous Symbol] &rArr; ob_pointer_expand &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_evt_disconnected_ind_handler
</UL>

<P><STRONG><a name="[87]"></a>app_sec_event_cb</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, app_sec.o(.text.app_sec_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = app_sec_event_cb &rArr; OUTLINED_FUNCTION_1 &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_bond_info_response
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_pairing_response
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_pin_response
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_ltk_response
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_get
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.text.app_sec_init)
</UL>
<P><STRONG><a name="[51c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_sec.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
</UL>

<P><STRONG><a name="[53e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_sec.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
</UL>

<P><STRONG><a name="[539]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_sec.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
</UL>

<P><STRONG><a name="[52d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_sec.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_event_cb
</UL>

<P><STRONG><a name="[80]"></a>ancs_event_cb</STRONG> (Thumb, 732 bytes, Stack size 64 bytes, ancs_client.o(.text.ancs_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ancs_event_cb &rArr; ancs_notify_evt &rArr; ancs_get_data &rArr; ancs_get_pending_data &rArr; ancs_set_state &rArr;  ancs_set_state (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_data_evt
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_notify_evt
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_get_pending_data
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;req_perform
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_item_len
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_buf
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_set_state
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ancs_client.o(.text.ancs_client_init)
</UL>
<P><STRONG><a name="[57d]"></a>ancs_set_state</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ancs_client.o(.text.ancs_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = ancs_set_state &rArr;  ancs_set_state (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gattc_find_service_by_uuid
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_get_encrypt_state
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gattc_write
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_tick_get
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_get_pending_data
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_set_state
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_event_cb
</UL>

<P><STRONG><a name="[57e]"></a>get_buf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ancs_client.o(.text.get_buf))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_event_cb
</UL>

<P><STRONG><a name="[57f]"></a>get_max_item_len</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ancs_client.o(.text.get_max_item_len))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_event_cb
</UL>

<P><STRONG><a name="[581]"></a>req_perform</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ancs_client.o(.text.req_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = req_perform &rArr; cs_gattc_write &rArr; ebh_gattc_write &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gattc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_event_cb
</UL>

<P><STRONG><a name="[582]"></a>ancs_get_pending_data</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ancs_client.o(.text.ancs_get_pending_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ancs_get_pending_data &rArr; ancs_set_state &rArr;  ancs_set_state (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gattc_write
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_tick_diff_10ms
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_tick_get
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_get_data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_event_cb
</UL>

<P><STRONG><a name="[5ab]"></a>dfu_env_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, chipsea_dfu.o(.text.dfu_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfu_env_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_version_char
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_cmd
</UL>

<P><STRONG><a name="[5af]"></a>get_new_img_address</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, chipsea_dfu.o(.text.get_new_img_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_new_img_address
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_data
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_cmd
</UL>

<P><STRONG><a name="[51d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chipsea_dfu.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_data
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_cmd
</UL>

<P><STRONG><a name="[5b0]"></a>dfu_crc32</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, chipsea_dfu.o(.text.dfu_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dfu_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_data
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_write_cmd
</UL>

<P><STRONG><a name="[185]"></a>chipsea_dfu_nvds_enable_mbr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_enable_mbr))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[186]"></a>chipsea_dfu_nvds_get_mbr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_get_mbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = chipsea_dfu_nvds_get_mbr &rArr; mbr_read_part &rArr; mbr_probe &rArr; mbr_sf_erase_write_sector_verify &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read_part
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[187]"></a>chipsea_dfu_nvds_put_mbr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_put_mbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = chipsea_dfu_nvds_put_mbr &rArr; mbr_write_part &rArr; mbr_probe &rArr; mbr_sf_erase_write_sector_verify &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write_part
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[188]"></a>chipsea_dfu_nvds_del_mbr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_del_mbr))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[189]"></a>chipsea_dfu_nvds_disable_mbr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_disable_mbr))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[18a]"></a>chipsea_dfu_nvds_enable_flash</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_enable_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = chipsea_dfu_nvds_enable_flash &rArr; drv_sf_enable &rArr; drv_sf_iflash_power_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_enable
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_located
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_cur_obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[18b]"></a>chipsea_dfu_nvds_get_flash</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_get_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chipsea_dfu_nvds_get_flash &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_located
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[51e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_cur_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_put_flash
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chipsea_dfu_nvds_get_flash
</UL>

<P><STRONG><a name="[18c]"></a>chipsea_dfu_nvds_put_flash</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_put_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = chipsea_dfu_nvds_put_flash &rArr; drv_sf_write &rArr; drv_sf_write_page
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_located
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[18d]"></a>chipsea_dfu_nvds_erase_flash</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_erase_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = chipsea_dfu_nvds_erase_flash &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_located
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_cur_obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[18e]"></a>chipsea_dfu_nvds_disable_flash</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_disable_flash))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[18f]"></a>chipsea_dfu_nvds_enable_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_enable_cfg))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[190]"></a>chipsea_dfu_nvds_get_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_get_cfg))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[191]"></a>chipsea_dfu_nvds_put_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_put_cfg))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[192]"></a>chipsea_dfu_nvds_del_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_del_cfg))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[193]"></a>chipsea_dfu_nvds_disable_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_disable_cfg))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[194]"></a>chipsea_dfu_nvds_enable_flash_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_enable_flash_ext))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[195]"></a>chipsea_dfu_nvds_get_flash_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_get_flash_ext))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[196]"></a>chipsea_dfu_nvds_put_flash_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_put_flash_ext))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[197]"></a>chipsea_dfu_nvds_erase_flash_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_erase_flash_ext))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[198]"></a>chipsea_dfu_nvds_disable_flash_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_disable_flash_ext))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[199]"></a>chipsea_dfu_nvds_enable_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_enable_dummy))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[19a]"></a>chipsea_dfu_nvds_get_dummy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_get_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chipsea_dfu_nvds_get_dummy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[19b]"></a>chipsea_dfu_nvds_put_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_put_dummy))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[19c]"></a>chipsea_dfu_nvds_del_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_del_dummy))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[19d]"></a>chipsea_dfu_nvds_disable_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chipsea_dfu_nvds.o(.text.chipsea_dfu_nvds_disable_dummy))
<BR>[Address Reference Count : 1]<UL><LI> chipsea_dfu_nvds.o(.rodata.dfu_nvds_itf)
</UL>
<P><STRONG><a name="[5ad]"></a>dfu_response</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, service_chipsea_dfu.o(.text.dfu_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dfu_response &rArr; cs_gatts_send_hvx &rArr; ebh_gatts_send_hvx &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gatts_send_hvx
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_chipsea_dfu_evt_cb
</UL>

<P><STRONG><a name="[182]"></a>dfu_begin_ind_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, service_chipsea_dfu.o(.text.dfu_begin_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dfu_begin_ind_handler &rArr; app_chipsea_dfu_update_start_ind_handler &rArr; cs_gap_conn_param_update &rArr; ob_gap_conn_param_request &rArr; ebh_l2cap_conn_parameters_update_request &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_chipsea_dfu_update_start_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_chipsea_dfu.o(.rodata.dfu_cb_itf)
</UL>
<P><STRONG><a name="[183]"></a>dfu_prog_ind_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, service_chipsea_dfu.o(.text.dfu_prog_ind_handler))
<BR><BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_chipsea_dfu_update_prog_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_chipsea_dfu.o(.rodata.dfu_cb_itf)
</UL>
<P><STRONG><a name="[184]"></a>dfu_end_ind_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, service_chipsea_dfu.o(.text.dfu_end_ind_handler))
<BR>[Address Reference Count : 1]<UL><LI> service_chipsea_dfu.o(.rodata.dfu_cb_itf)
</UL>
<P><STRONG><a name="[593]"></a>batt_level_report</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, service_common.o(.text.batt_level_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = batt_level_report &rArr; cs_gatts_send_hvx &rArr; ebh_gatts_send_hvx &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gatts_send_hvx
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_discovery_event_cb
</UL>

<P><STRONG><a name="[9a]"></a>service_discovery_event_cb</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, service_common.o(.text.service_discovery_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = service_discovery_event_cb &rArr; cs_gatts_read_response &rArr; ebh_gatts_read_response &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gatts_read_response
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batt_level_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_common.o(.text.service_common_init)
</UL>
<P><STRONG><a name="[81]"></a>app_24g_ble_bb_frame_ongoing_handler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, app_24g.o(.text.app_24g_ble_bb_frame_ongoing_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_24g_ble_bb_frame_ongoing_handler &rArr; cs_24g_control &rArr; cs_24g_switch_role
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_control
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_read_int
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_24g.o(.text.app_24g_init)
</UL>
<P><STRONG><a name="[82]"></a>timer1_callback</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, app_24g.o(.text.timer1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer1_callback &rArr; OUTLINED_FUNCTION_0 &rArr; cs_24g_control &rArr; cs_24g_switch_role
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_prevent
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_24g.o(.text.app_24g_init)
</UL>
<P><STRONG><a name="[83]"></a>cs_24g_callback</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, app_24g.o(.text.cs_24g_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = cs_24g_callback &rArr; cs_log &rArr; cs_vprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_switch_role
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_control
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_allow
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_24g.o(.text.app_24g_init)
</UL>
<P><STRONG><a name="[51f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_24g.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; cs_24g_control &rArr; cs_24g_switch_role
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_control
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_24g_ble_bb_frame_ongoing_handler
</UL>

<P><STRONG><a name="[1c2]"></a>pm_system_enter_deepsleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pm.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pm_system_enter_deepsleep
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_SystemEnterDeepSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_enter_common_sleep
</UL>

<P><STRONG><a name="[1c3]"></a>pm_sleep_checker_check</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pm.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pm_sleep_checker_check &rArr; drv_pmu_sleep_status &rArr; drv_pmu_gpio_lowpower_is_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_sleep_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_check
</UL>

<P><STRONG><a name="[1c4]"></a>pm_sleep_state_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pm.o(RAM_CODE.PM))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_check
</UL>

<P><STRONG><a name="[1a0]"></a>pm_sleep_notify</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pm.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_sleep_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm.o(RAM_CODE.PM)
</UL>
<P><STRONG><a name="[1ab]"></a>pm_sleep_enter_common_sleep</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pm.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pm_sleep_enter_common_sleep &rArr; drv_pmu_sleep_enter &rArr; drv_pmu_32k_switch_to_rc &rArr; drv_calib_rc32k &rArr; drv_calib_rc32k_fast &rArr; drv_calib_rc32k_accuracy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_system_enter_deepsleep
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_sleep_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_enter_light_sleep
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
</UL>

<P><STRONG><a name="[1ac]"></a>pm_sleep_enter_light_sleep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pm.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pm_sleep_enter_light_sleep &rArr; pm_sleep_enter_common_sleep &rArr; drv_pmu_sleep_enter &rArr; drv_pmu_32k_switch_to_rc &rArr; drv_calib_rc32k &rArr; drv_calib_rc32k_fast &rArr; drv_calib_rc32k_accuracy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep_enter_common_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sleep
</UL>

<P><STRONG><a name="[608]"></a>usart_rx_line_int_handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_usart.o(.text.usart_rx_line_int_handler))
<BR><BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_isr
</UL>

<P><STRONG><a name="[606]"></a>usart_ex_config_mode_baudrate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, drv_usart_ex.o(.text.usart_ex_config_mode_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usart_ex_config_mode_baudrate &rArr; drv_rcc_clock_set &rArr; rcc_clk_usart_div_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_usart_ex_init
</UL>

<P><STRONG><a name="[1c5]"></a>cs_24g_ce_high_pulse</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, drv_24g.o(RAM_CODE.24G), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cs_24g_ce_high_pulse
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_write_int
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_write
</UL>

<P><STRONG><a name="[1c6]"></a>cs_24g_read_rx_payload_width</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_24g.o(RAM_CODE.24G))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cs_24g_isr
</UL>

<P><STRONG><a name="[1c7]"></a>cs_24g_reg_store</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, drv_24g.o(RAM_CODE.24G), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs_24g_reg_store
</UL>

<P><STRONG><a name="[1b2]"></a>cs_24g_reg_restore</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, drv_24g.o(RAM_CODE.24G), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs_24g_reg_restore
</UL>

<P><STRONG><a name="[1b4]"></a>cs_24g_write_tx_payload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_24g.o(RAM_CODE.24G), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_write_int
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_write
</UL>

<P><STRONG><a name="[52e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_24g.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; cs_24g_set_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_rf_parameters
</UL>

<P><STRONG><a name="[5a6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_24g.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_rf_parameters
</UL>

<P><STRONG><a name="[53a]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_24g.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; cs_24g_set_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_rf_parameters
</UL>

<P><STRONG><a name="[5a0]"></a>cs_24g_set_deviation</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, drv_24g.o(.text.cs_24g_set_deviation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs_24g_set_deviation
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_rf_parameters
</UL>

<P><STRONG><a name="[5a1]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_24g.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_set_deviation
</UL>

<P><STRONG><a name="[89]"></a>cs_24g_set_kdco</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_24g.o(.text.cs_24g_set_kdco))
<BR>[Address Reference Count : 1]<UL><LI> drv_24g.o(.text.cs_24g_set_deviation)
</UL>
<P><STRONG><a name="[59d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_24g.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_24g_control
</UL>

<P><STRONG><a name="[57a]"></a>aes_hw_encrypt</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, drv_aes_hw.o(.text.aes_hw_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_hw_encrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_aes128_hw_encrypt
</UL>

<P><STRONG><a name="[5fe]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_sf_sys.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_probe
</UL>

<P><STRONG><a name="[521]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_sf_sys.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; drv_sf_detect &rArr; drv_sf_read_id_safe &rArr; drv_sf_read_id
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_probe
</UL>

<P><STRONG><a name="[1ba]"></a>drv_sf_write_end</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_wait_sr_no_busy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_wait_sr_no_busy_with_suspend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_dma
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_critical_cs_get
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_critical_object_get
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_nodma
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_page_dma
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_16bits
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>

<P><STRONG><a name="[1bd]"></a>drv_sf_quad_bus_read_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_sf.o(RAM_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_config
</UL>

<P><STRONG><a name="[543]"></a>drv_sf_write_begin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_sf.o(.text.drv_sf_write_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = drv_sf_write_begin &rArr; drv_sf_write_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_enable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_critical_cs_get
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_critical_object_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_page_dma
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[5f8]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_16bits
</UL>

<P><STRONG><a name="[542]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; drv_sf_write_begin &rArr; drv_sf_write_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase_sector
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_16bits
</UL>

<P><STRONG><a name="[5f9]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_mask_16bits
</UL>

<P><STRONG><a name="[5fa]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_mask_16bits
</UL>

<P><STRONG><a name="[5fb]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_mask_16bits
</UL>

<P><STRONG><a name="[5fc]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_mask_16bits
</UL>

<P><STRONG><a name="[5fd]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_mask_16bits
</UL>

<P><STRONG><a name="[54a]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; drv_sf_read_sr_16bits &rArr; drv_sf_read_sr2
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_sr_16bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_sr_mask_16bits
</UL>

<P><STRONG><a name="[5e7]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_deep_power_down_leave
</UL>

<P><STRONG><a name="[5e8]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_iflash_power_enable
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_deep_power_down_leave
</UL>

<P><STRONG><a name="[5e9]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_iflash_power_enable
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_deep_power_down_leave
</UL>

<P><STRONG><a name="[5f0]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_iflash_power_enable
</UL>

<P><STRONG><a name="[5ee]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase_sector
</UL>

<P><STRONG><a name="[5ef]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase_sector
</UL>

<P><STRONG><a name="[54e]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write_end
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase_sector
</UL>

<P><STRONG><a name="[536]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase
</UL>

<P><STRONG><a name="[5f2]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_sf.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_fast_quad_dma
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_fast_dual_dma
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read_fast_dma
</UL>

<P><STRONG><a name="[5ec]"></a>drv_sf_iflash_power_enable</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, drv_sf.o(.text.drv_sf_iflash_power_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = drv_sf_iflash_power_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_enable
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_disable
</UL>

<P><STRONG><a name="[601]"></a>spi_get_resource</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_spi.o(.text.spi_get_resource))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_isr
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_isr_callback
</UL>

<P><STRONG><a name="[602]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_spi.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_isr
</UL>

<P><STRONG><a name="[5cf]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_i2c.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_isr
</UL>

<P><STRONG><a name="[530]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_rtc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_timer_get
</UL>

<P><STRONG><a name="[5e2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_radio.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rf_tx_power_set
</UL>

<P><STRONG><a name="[604]"></a>tim_get_resource</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_tim.o(.text.tim_get_resource))
<BR><BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tim_isr
</UL>

<P><STRONG><a name="[5e4]"></a>rng_modify_rc32k_rctune</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_rng.o(.text.rng_modify_rc32k_rctune))
<BR><BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rng_get
</UL>

<P><STRONG><a name="[1da]"></a>drv_pmu_gpio_lowpower_is_ready</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, drv_pmu.o(RAM_CODE.PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_pmu_gpio_lowpower_is_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_sleep_status
</UL>

<P><STRONG><a name="[5d2]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_pmu.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_32k_switch_to_rc
</UL>

<P><STRONG><a name="[1db]"></a>drv_pmu_wakeup_pin_wait_idle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_pmu.o(RAM_CODE.PM))
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_wakeup_pin_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_sleep_enter
</UL>

<P><STRONG><a name="[1cd]"></a>drv_pmu_topclk_xtal32m_wait_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_pmu.o(RAM_CODE.PM))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_sleep_leave
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_startup
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_xtal32m_power_enable
</UL>

<P><STRONG><a name="[1d2]"></a>drv_pmu_topclk_xtal32m_x2_enable_and_switch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_pmu.o(RAM_CODE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = drv_pmu_topclk_xtal32m_x2_enable_and_switch &rArr; drv_sf_iflash_delay_recalib &rArr; drv_sf_config &rArr; drv_sf_quad_enable &rArr; drv_sf_write_sr_mask_16bits &rArr; drv_sf_write_sr_16bits &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_iflash_delay_recalib
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_switch_to_xtal32m_x2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_x2_enable
</UL>

<P><STRONG><a name="[53b]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_pmu.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; drv_pmu_topclk_rc32m_power_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_rc32m_power_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_force_reboot
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_fast_startup
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_startup
</UL>

<P><STRONG><a name="[547]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_pmu.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; drv_pmu_topclk_rc32m_power_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_rc32m_power_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_fast_startup
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_startup
</UL>

<P><STRONG><a name="[523]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_pmu.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; drv_rcc_clock_get &rArr;  drv_rcc_clock_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_fast_startup
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_xtal32m_startup
</UL>

<P><STRONG><a name="[5db]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_pmu.o(.text.OUTLINED_FUNCTION_3), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
</UL>

<P><STRONG><a name="[208]"></a>__NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_pmu.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_force_reboot
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_sleep_enter
</UL>

<P><STRONG><a name="[5d3]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_pmu.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_dcdc_enable
</UL>

<P><STRONG><a name="[5de]"></a>rcc_clk_search</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, drv_rcc.o(.text.rcc_clk_search))
<BR><BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_get
</UL>

<P><STRONG><a name="[524]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_rcc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; drv_rcc_clock_get &rArr;  drv_rcc_clock_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_set
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_clk_usart_div_set
</UL>

<P><STRONG><a name="[5df]"></a>rcc_clk_usart_div_set</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_rcc.o(.text.rcc_clk_usart_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rcc_clk_usart_div_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rcc_clock_set
</UL>

<P><STRONG><a name="[5bd]"></a>drv_calib_patch</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, drv_calib.o(.text.drv_calib_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_calib_patch &rArr; drv_calib_repair_rf_pll_temperature_repair
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rf_pll_temperature_repair
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
</UL>

<P><STRONG><a name="[5c4]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_calib.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
</UL>

<P><STRONG><a name="[5c5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drv_calib.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
</UL>

<P><STRONG><a name="[5c6]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_calib.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
</UL>

<P><STRONG><a name="[5c7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_calib.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
</UL>

<P><STRONG><a name="[5c8]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_calib.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
</UL>

<P><STRONG><a name="[5c9]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_calib.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
</UL>

<P><STRONG><a name="[5ca]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_calib.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
</UL>

<P><STRONG><a name="[5cb]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_calib.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
</UL>

<P><STRONG><a name="[5c3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_calib_repair.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rf_pll_temperature_repair
</UL>

<P><STRONG><a name="[1a2]"></a>drv_calib_repair_rc_rf_temperature_check</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, drv_calib_repair.o(RAM_CODE.PM), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = drv_calib_repair_rc_rf_temperature_check &rArr; drv_adc_control &rArr;  drv_adc_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_topclk_recalib
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_voltage_temperature
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rf_pll_temperature_repair
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_pm_checker_handler
</UL>

<P><STRONG><a name="[20c]"></a>drv_calib_repair_voltage_temperature</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_calib_repair.o(.text.drv_calib_repair_voltage_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = drv_calib_repair_voltage_temperature &rArr; drv_pmu_register_step_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_register_step_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rc_rf_temperature_check
</UL>

<P><STRONG><a name="[1a3]"></a>drv_calib_repair_rc32k_temperature_check</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_calib_repair.o(RAM_CODE.PM), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = drv_calib_repair_rc32k_temperature_check &rArr; drv_pmu_select_32k &rArr;  drv_pmu_select_32k (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pmu_select_32k_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_pm_checker_handler
</UL>

<P><STRONG><a name="[1a4]"></a>drv_calib_repair_pm_checker_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_calib_repair.o(RAM_CODE.PM), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = drv_calib_repair_pm_checker_handler &rArr; drv_calib_repair_rc_rf_temperature_check &rArr; drv_adc_control &rArr;  drv_adc_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rc32k_temperature_check
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_repair_rc_rf_temperature_check
</UL>

<P><STRONG><a name="[1a5]"></a>drv_calib_repair_pm_sleep_store_restore_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_calib_repair.o(RAM_CODE.PM), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_calib_repair_pm_sleep_store_restore_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_sys_restore
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_calib_rf_restore
</UL>

<P><STRONG><a name="[5bb]"></a>drv_adc_convert_channel_data</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, drv_adc.o(.text.drv_adc_convert_channel_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = drv_adc_convert_channel_data &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_isr
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_read
</UL>

<P><STRONG><a name="[531]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_adc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_convert_channel_data
</UL>

<P><STRONG><a name="[5b7]"></a>drv_adc_config</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, drv_adc.o(.text.drv_adc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = drv_adc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[525]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_adc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[5b8]"></a>drv_adc_get_channel_data</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, drv_adc.o(.text.drv_adc_get_channel_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = drv_adc_get_channel_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_read
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_control
</UL>

<P><STRONG><a name="[53c]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[64c]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[668]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[669]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[532]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[526]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; prvUnlockQueue &rArr; OUTLINED_FUNCTION_5 &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[646]"></a>prvCopyDataToQueue</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; OUTLINED_FUNCTION_1 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[53f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[527]"></a>prvUnlockQueue</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; OUTLINED_FUNCTION_5 &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[544]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[67c]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[645]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[540]"></a>prvIsQueueEmpty</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[64e]"></a>prvInitialiseNewTask</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[63f]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[546]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[640]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>

<P><STRONG><a name="[642]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[528]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[648]"></a>prvDeleteTCB</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[66e]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[63d]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[54c]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[534]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[67d]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[a3]"></a>prvIdleTask</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvIdleTask &rArr; vPortSuppressTicksAndSleep &rArr; pm_power_manage &rArr; pm_sleep &rArr; pm_sleep_enter_light_sleep &rArr; pm_sleep_enter_common_sleep &rArr; drv_pmu_sleep_enter &rArr; drv_pmu_32k_switch_to_rc &rArr; drv_calib_rc32k &rArr; drv_calib_rc32k_fast &rArr; drv_calib_rc32k_accuracy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[649]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(.text.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[643]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[a6]"></a>prvTimerTask</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[653]"></a>prvSampleTimeNow</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[652]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[651]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, timers.o(.text.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[52a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>

<P><STRONG><a name="[659]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, heap_5.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[516]"></a>IRQ_Context</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmsis_os2.o(.text.IRQ_Context))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ_Context
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[626]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[53d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; IRQ_Context
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[52c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os2.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; IRQ_Context
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Context
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>

<P><STRONG><a name="[62d]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os2.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[97]"></a>TimerCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os2.o(.text.TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerCallback &rArr; pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[99]"></a>prvTaskExitError</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[675]"></a>prvPortStartFirstTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[665]"></a>vSleepTimerSetTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, port.o(.text.vSleepTimerSetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vSleepTimerSetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSleepTimerOverflowHandler
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[a1]"></a>vSleepTimerOverflowHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(.text.vSleepTimerOverflowHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vSleepTimerOverflowHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSleepTimerSetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.vPortSetupTimerInterrupt)
</UL>
<P><STRONG><a name="[574]"></a>_vsnprintf</STRONG> (Thumb, 1132 bytes, Stack size 104 bytes, cs_printf.o(.text._vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_printf
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_vprintf
</UL>

<P><STRONG><a name="[8b]"></a>_out_char</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs_printf.o(.text._out_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _out_char &rArr; cs_putchar &rArr; shell_out &rArr; drv_usart_ex_write
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_printf.o(.text.cs_vprintf)
</UL>
<P><STRONG><a name="[575]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs_printf.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[576]"></a>_atoi</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cs_printf.o(.text._atoi))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[577]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cs_printf.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[565]"></a>_etoa</STRONG> (Thumb, 800 bytes, Stack size 104 bytes, cs_printf.o(.text._etoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[568]"></a>_ftoa</STRONG> (Thumb, 740 bytes, Stack size 128 bytes, cs_printf.o(.text._ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_rev
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[578]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cs_printf.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[579]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cs_printf.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[56e]"></a>_ntoa_long_long</STRONG> (Thumb, 164 bytes, Stack size 120 bytes, cs_printf.o(.text._ntoa_long_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _ntoa_long_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[548]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs_printf.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; _ntoa_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[7f]"></a>_out_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs_printf.o(.text._out_null))
<BR>[Address Reference Count : 1]<UL><LI> cs_printf.o(.text._vsnprintf)
</UL>
<P><STRONG><a name="[56d]"></a>_ntoa_format</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, cs_printf.o(.text._ntoa_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
</UL>

<P><STRONG><a name="[549]"></a>_ntoa_long</STRONG> (Thumb, 138 bytes, Stack size 96 bytes, cs_printf.o(.text._ntoa_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _ntoa_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[56b]"></a>_out_rev</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, cs_printf.o(.text._out_rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
</UL>

<P><STRONG><a name="[56c]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cs_printf.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
</UL>

<P><STRONG><a name="[54d]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cs_printf.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[541]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs_printf.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[570]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs_printf.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_rev
</UL>

<P><STRONG><a name="[1e4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, bb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[35]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; obc_sleep_duration_check &rArr; obc_llt_timer_sw_isr &rArr; obc_llt_timer_event_start_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_sleep_duration_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>[Anonymous Symbol]</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, bb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[22d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[233]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[232]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[22b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[231]"></a>[Anonymous Symbol]</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[22c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[235]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[229]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[23e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[234]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[23b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
</UL>

<P><STRONG><a name="[22f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bb_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[220]"></a>[Anonymous Symbol]</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_adv_data_update
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_adv.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_et_set &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_adv.o(.text)
</UL>
<P><STRONG><a name="[21e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_fg_remove
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_stop
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[39]"></a>[Anonymous Symbol]</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_adv.o(.text)
</UL>
<P><STRONG><a name="[222]"></a>[Anonymous Symbol]</STRONG> (Thumb, 1456 bytes, Stack size 104 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_ble_pkt_dur_in_us
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_idx_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[230]"></a>[Anonymous Symbol]</STRONG> (Thumb, 904 bytes, Stack size 80 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_ble_pkt_dur_in_us
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_tx_path_comp_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_init_info_get
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[221]"></a>[Anonymous Symbol]</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_start
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_scan_rsp_data_update
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[21d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; bbp_sync_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_sync_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[38]"></a>[Anonymous Symbol]</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_et_set &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_adv.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>[Anonymous Symbol]</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, bb_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; bbp_init_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_rxdesc_free
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_rxdesc_check
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_idx_get
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bb_adv.o(.text)
<LI> bb_adv.o(.text)
</UL>
<P><STRONG><a name="[24a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bb_base.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
</UL>

<P><STRONG><a name="[247]"></a>[Anonymous Symbol]</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bb_base.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_rxdesc_reset
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_init
</UL>

<P><STRONG><a name="[24f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bb_base.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_white_list_rem
</UL>

<P><STRONG><a name="[261]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_timer_del &rArr; obc_co_list_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_llcp_tx
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_tx
</UL>

<P><STRONG><a name="[25e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_tx
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[262]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_llcp_tx
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_tx
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_flow_set
</UL>

<P><STRONG><a name="[266]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_flow_set
</UL>

<P><STRONG><a name="[25b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[26c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_tx_enc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_rx_enc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_current_tx_power_get
</UL>

<P><STRONG><a name="[254]"></a>[Anonymous Symbol]</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_send_basic &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send_basic
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[252]"></a>[Anonymous Symbol]</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_per_remove
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_llcp_tx_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_free
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_stop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_init
</UL>

<P><STRONG><a name="[3e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_con.o(.text)
</UL>
<P><STRONG><a name="[25a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_params_current_per_add &rArr; obc_llt_params_current_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_current_per_add
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_start
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_pref_slave_evt_dur_set
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_len_update
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1e1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, bb_con.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[268]"></a>[Anonymous Symbol]</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_tx_len_update_for_rate
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_phys_update
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_len_update
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[258]"></a>[Anonymous Symbol]</STRONG> (Thumb, 720 bytes, Stack size 40 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_llcp_tx
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_tx
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_flow_set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1e2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_start
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1e3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 928 bytes, Stack size 56 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_cur_cs_idx_get
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_active_check
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_channel_assess
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_clk_sub_bs
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_rxdesc_free
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_rxdesc_check
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_start
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_et_set &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_con.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, bb_con.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send_basic
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_llcp_tx_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_free
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_read_clock
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_con.o(.text)
</UL>
<P><STRONG><a name="[275]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bb_padv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[277]"></a>[Anonymous Symbol]</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bb_padv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[279]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bb_padv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_stop
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[274]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[273]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bb_padv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[270]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bb_padv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_sync_info_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_init_info_get
</UL>

<P><STRONG><a name="[272]"></a>[Anonymous Symbol]</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_start
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[27a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [Anonymous Symbol] &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_stop
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[27c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_data_update
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[40]"></a>[Anonymous Symbol]</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_padv.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_et_set &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_padv.o(.text)
</UL>
<P><STRONG><a name="[276]"></a>[Anonymous Symbol]</STRONG> (Thumb, 592 bytes, Stack size 72 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_ble_pkt_dur_in_us
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_tx_path_comp_get
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[41]"></a>[Anonymous Symbol]</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_padv.o(.text)
</UL>
<P><STRONG><a name="[27f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_idx_get
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[27e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, bb_padv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[282]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bb_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = [Anonymous Symbol] &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_stop
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_init
</UL>

<P><STRONG><a name="[43]"></a>[Anonymous Symbol]</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bb_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_test.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>[Anonymous Symbol]</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, bb_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_et_set &rArr; obc_bb_frame_ongoing &rArr; drv_pmu_ana_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_et_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_test.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>[Anonymous Symbol]</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bb_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_rxdesc_free
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_rxdesc_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_test.o(.text)
</UL>
<P><STRONG><a name="[286]"></a>[Anonymous Symbol]</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, bb_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_free
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_insert
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_timer_del
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[284]"></a>[Anonymous Symbol]</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bb_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_stop
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
</UL>

<P><STRONG><a name="[28e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_conn_param_update_cb
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_conn_param_response_cb
</UL>

<P><STRONG><a name="[290]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_conn_param_update_cb
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_conn_param_response_cb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_conn_param_reject_response_cb
</UL>

<P><STRONG><a name="[2a8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request_req_adapt
</UL>

<P><STRONG><a name="[28a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_set
</UL>

<P><STRONG><a name="[295]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request_req_adapt
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request
</UL>

<P><STRONG><a name="[2ac]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_device_info_le_evt_adapt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_device_info_hci_evt_adapt
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_device_info_hci_cmp_adapt
</UL>

<P><STRONG><a name="[29f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; ob_gap_conn_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_power_changed_evt_adapt
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_phy_update_evt_adapt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_params_update_evt_adapt
</UL>

<P><STRONG><a name="[28f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_opt_cfg_get
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_conn_param_update_cb
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_conn_param_response_cb
</UL>

<P><STRONG><a name="[2a3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, csble_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; ob_gap_conn_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_data_length_changed_evt_adapt
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request_req_adapt
</UL>

<P><STRONG><a name="[2b7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_disconnect
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_disconnect_by_handle
</UL>

<P><STRONG><a name="[2b5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_reset_cmp_adapt
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_cmp_adapt
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2b4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_cmp_adapt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_deinit
</UL>

<P><STRONG><a name="[2b3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_disconnect
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_disconnect_by_handle
</UL>

<P><STRONG><a name="[2bc]"></a>[Anonymous Symbol]</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [Anonymous Symbol] &rArr; ob_gap_conn_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_le_evt_adapt
</UL>

<P><STRONG><a name="[2bf]"></a>[Anonymous Symbol]</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_le_evt_adapt
</UL>

<P><STRONG><a name="[4b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_conn.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 182 bytes, Stack size 104 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_opt_cfg_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_conn.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, csble_gap_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_conn.o(.text)
</UL>
<P><STRONG><a name="[2d2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_hci_cmp_adapt
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_updating_state_proc
</UL>

<P><STRONG><a name="[2d1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_hci_cmp_adapt
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_updating_state_proc
</UL>

<P><STRONG><a name="[2da]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_starting_state_proc
</UL>

<P><STRONG><a name="[2d0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_hci_cmp_adapt
</UL>

<P><STRONG><a name="[2c3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_adv_msg_sche_adapt
</UL>

<P><STRONG><a name="[2ca]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2d6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_stopping_state_proc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv.o(.text)
</UL>
<P><STRONG><a name="[2d8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_updating_state_proc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_starting_state_proc
</UL>

<P><STRONG><a name="[52]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv.o(.text)
</UL>
<P><STRONG><a name="[2d5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_stopping_state_proc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_starting_state_proc
</UL>

<P><STRONG><a name="[4f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>[Anonymous Symbol]</STRONG> (Thumb, 178 bytes, Stack size 112 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_opt_cfg_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>[Anonymous Symbol]</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_get
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv.o(.text)
</UL>
<P><STRONG><a name="[2d9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_updating_state_proc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_starting_state_proc
</UL>

<P><STRONG><a name="[53]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv.o(.text)
</UL>
<P><STRONG><a name="[2c4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_adv_msg_sche_adapt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[2c6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_state_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_adv_msg_sche_adapt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_deinit
</UL>

<P><STRONG><a name="[2c8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, csble_gap_ext_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [Anonymous Symbol] &rArr; ob_pointer_expand &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_pointer_expand
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_opt_cfg_get
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_adv_start
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_hci_le_evt_adapt
</UL>

<P><STRONG><a name="[a7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = [Anonymous Symbol] &rArr; ob_ext_adv_state_proc &rArr; [Anonymous Symbol] &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_state_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[a8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[a9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ob_ext_adv_starting_state_proc &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_starting_state_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[aa]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[ab]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol] &rArr; ob_ext_adv_stopping_state_proc &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_stopping_state_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[ac]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[ad]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[ae]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; ob_ext_adv_updating_state_proc &rArr; [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ext_adv_updating_state_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[af]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, csble_gap_ext_adv_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_ext_adv_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[55]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, csble_gap_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 2]<UL><LI> csble_gap_scan.o(.text)
<LI> csble_gap_scan.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>[Anonymous Symbol]</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, csble_gap_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_gap_scan.o(.text)
</UL>
<P><STRONG><a name="[2de]"></a>[Anonymous Symbol]</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, csble_gap_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_hci_send_reg &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_reset_cmp_adapt
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_hci_cmp_adapt
</UL>

<P><STRONG><a name="[2e0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, csble_gap_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_hci_cmp_adapt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_deinit
</UL>

<P><STRONG><a name="[2fa]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, csble_gap_smp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_pairing_response
</UL>

<P><STRONG><a name="[2f1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, csble_gap_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_ltk_info_response
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_irk_info_response
</UL>

<P><STRONG><a name="[2ed]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, csble_gap_smp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_bond_ltk_request
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_bond_irk_request
</UL>

<P><STRONG><a name="[312]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_rsp
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_by_uuid_rsp
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_desc_rsp
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_char_rsp
</UL>

<P><STRONG><a name="[307]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, csble_gatt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_prepare_write_req
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_indicate_cfm
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_evt_tx_complete
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_evt_mtu_exchanged
</UL>

<P><STRONG><a name="[308]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, csble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_event_trigger_adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_indicate_cfm
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_evt_tx_complete
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_evt_mtu_exchanged
</UL>

<P><STRONG><a name="[30e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, csble_gatt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_write_req
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_hvx_ind
</UL>

<P><STRONG><a name="[30c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, csble_gatt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_read_req
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_write_rsp
</UL>

<P><STRONG><a name="[315]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, csble_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_by_uuid_rsp
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_char_rsp
</UL>

<P><STRONG><a name="[314]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, csble_gatt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_by_uuid_rsp
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_char_rsp
</UL>

<P><STRONG><a name="[311]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, csble_gatt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_read_rsp
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_rsp
</UL>

<P><STRONG><a name="[323]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csble_init_no_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[339]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, csble_host_soc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[320]"></a>[Anonymous Symbol]</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_l2cap_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_send
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_send_cb_port
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
</UL>

<P><STRONG><a name="[58]"></a>[Anonymous Symbol]</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_l2cap_received_adapt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_received_adapt
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_evt_received_adapt
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_idx_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; ob_gap_hci_error_evt_adapt &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_gap_addr_set
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_acl_cfg
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_reset_cmp_adapt
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_hci_cmp_adapt
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_reset_cmp_adapt
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_hci_cmp_adapt
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_reset_cmp_adapt
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_cmp_adapt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_error_evt_adapt
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_device_info_hci_cmp_adapt
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.rodata)
</UL>
<P><STRONG><a name="[b2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_encrypt_changed_adapt &rArr; ebh_smp_evt_encrypted &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_encrypt_changed_adapt
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_sec_changed_adapt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_packets_completed_adapt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_disconnected_adapt
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_sec_changed_adapt
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_evt_adapt
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_idx_get
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_device_info_hci_evt_adapt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.rodata)
</UL>
<P><STRONG><a name="[b3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; ob_gap_adv_hci_le_evt_adapt &rArr; [Anonymous Symbol] &rArr; ob_pointer_expand &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_request_adapt
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_hci_le_evt_adapt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_adv_hci_le_evt_adapt
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_hci_le_evt_adapt
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_idx_get
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_scan_request_recv_evt_adapt
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_power_changed_evt_adapt
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_phy_update_evt_adapt
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_hci_device_info_le_evt_adapt
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_data_length_changed_evt_adapt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_params_update_evt_adapt
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_gap_conn_param_request_req_adapt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.rodata)
</UL>
<P><STRONG><a name="[b0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = [Anonymous Symbol] &rArr; obc_hci_h4_receive_handler &rArr; hci_cmd_received &rArr; [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.rodata)
</UL>
<P><STRONG><a name="[b7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_connected_adapt &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_connected_adapt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_connected_adapt
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_connected_adapt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.rodata)
</UL>
<P><STRONG><a name="[b8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gatt_disconnected_adapt &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_disconnected_adapt
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_disconnected_adapt
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_disconnected_adapt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.rodata)
</UL>
<P><STRONG><a name="[b6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gatt_received_adapt &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_received_adapt
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_received_adapt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_received_adapt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.rodata)
</UL>
<P><STRONG><a name="[b4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = [Anonymous Symbol] &rArr; obc_hci_h4_receive_handler &rArr; hci_cmd_received &rArr; [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_set
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.rodata)
</UL>
<P><STRONG><a name="[b5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gatt_send_done_adapt &rArr; ebh_gatt_evt_tx_complete &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_done_adapt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_send_done_adapt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_done_adapt
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.rodata)
</UL>
<P><STRONG><a name="[57]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, csble_host_soc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ob_adv_msg_sche_adapt &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_clear
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_sche_once
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_adv_msg_sche_adapt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csble_host_soc.o(.text)
</UL>
<P><STRONG><a name="[34f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_cpft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; drv_efuse_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_efuse_read
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_uninit
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_init
</UL>

<P><STRONG><a name="[350]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_cpft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [Anonymous Symbol] &rArr; cs_crc16_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_uninit
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cpft_init
</UL>

<P><STRONG><a name="[1e5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_sf_a1.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; rom_drv_sfb_write_dma &rArr; rom_drv_sfb_write_dma_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_dma
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_critical_object_get
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sfb_write_nodma
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_drv_sf_wait_sr_no_busy
</UL>

<P><STRONG><a name="[359]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ebh_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_state
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
</UL>

<P><STRONG><a name="[372]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[35e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_sec_changed_adapt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_received_adapt
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_disconnected_adapt
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_write_response
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_send_hvx
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_read_response
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_write
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_find_service_by_uuid
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_sec_lvl_get
</UL>

<P><STRONG><a name="[37a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[380]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gatts_evt_read_req &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_read_req
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[366]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[382]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[377]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[37f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[378]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[374]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[375]"></a>[Anonymous Symbol]</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_att_db_iter
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_iter
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[371]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[367]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gatt_send_cb_port &rArr; [Anonymous Symbol] &rArr; ebh_l2cap_send
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[36f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[361]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_read_response
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[37e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[376]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[379]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gatt_send_cb_port &rArr; [Anonymous Symbol] &rArr; ebh_l2cap_send
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[bb]"></a>[Anonymous Symbol]</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gattc_evt_find_serv_by_uuid_rsp &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_write_rsp
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_read_rsp
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_read_by_uuid_rsp
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_rsp
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_by_uuid_rsp
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_desc_rsp
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_char_rsp
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[bc]"></a>[Anonymous Symbol]</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_gatt_evt_mtu_exchanged &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[bd]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_gatt_evt_mtu_exchanged &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[d0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gatts_write_response &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_write_response
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_write_req
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[d1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[c0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_iter
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[c1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gattc_evt_find_serv_by_uuid_rsp &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_by_uuid_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[be]"></a>[Anonymous Symbol]</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[bf]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gattc_evt_find_desc_rsp &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_desc_rsp
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[d6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gatts_evt_indicate_cfm &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_indicate_cfm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[d5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gattc_evt_hvx_ind &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_hvx_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[ba]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gattc_evt_hvx_ind &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_hvx_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[d4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[ce]"></a>[Anonymous Symbol]</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_iter
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_prepare_write_req
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[cf]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[c6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_att_db_iter
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_iter
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[c7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gattc_evt_read_rsp &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_read_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[ca]"></a>[Anonymous Symbol]</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[cb]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gattc_evt_find_serv_rsp &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_serv_rsp
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[c2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_iter
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[c3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gattc_evt_find_char_rsp &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_read_by_uuid_rsp
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_find_char_rsp
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[c8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[c9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[d2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[d3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[c4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_att_db_iter
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_iter
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[c5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gattc_evt_read_rsp &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_read_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[d7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[b9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_att_db_iter
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_iter
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[cc]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_att_db_iter
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_att_db_iter
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[cd]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gattc_evt_write_rsp &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_evt_write_rsp
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.rodata)
</UL>
<P><STRONG><a name="[5e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.text)
</UL>
<P><STRONG><a name="[36d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_find_service_by_uuid
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[36e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[363]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_done_adapt
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_disconnected_adapt
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[360]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_send_hvx
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_read_response
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_write
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[37d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[61]"></a>[Anonymous Symbol]</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>[Anonymous Symbol]</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gatts_read_response &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_read_response
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_read_req
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ebh_gatt.o(.text)
<LI> ebh_gatt.o(.text)
</UL>
<P><STRONG><a name="[368]"></a>[Anonymous Symbol]</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_received_adapt
</UL>

<P><STRONG><a name="[373]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_gatt_evt_mtu_exchanged &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_evt_mtu_exchanged
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[5c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_evt_write_req
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ebh_gatt.o(.text)
<LI> ebh_gatt.o(.text)
</UL>
<P><STRONG><a name="[36a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_find_service_by_uuid
</UL>

<P><STRONG><a name="[36b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_write
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gattc_find_service_by_uuid
</UL>

<P><STRONG><a name="[36c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[35f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_write_response
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_read_response
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[381]"></a>[Anonymous Symbol]</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[362]"></a>[Anonymous Symbol]</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_send_cb_port
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[365]"></a>[Anonymous Symbol]</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatts_write_response
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[62]"></a>[Anonymous Symbol]</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ebh_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_gatt.o(.text)
</UL>
<P><STRONG><a name="[369]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ebh_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_received_adapt
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_gatt_disconnected_adapt
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[385]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ebh_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[da]"></a>[Anonymous Symbol]</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_hci.o(.rodata)
</UL>
<P><STRONG><a name="[d9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ebh_hci.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_hci.o(.rodata)
</UL>
<P><STRONG><a name="[d8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ebh_hci.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_hci.o(.rodata)
</UL>
<P><STRONG><a name="[db]"></a>[Anonymous Symbol]</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_hci.o(.rodata)
</UL>
<P><STRONG><a name="[dc]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_hci.o(.rodata)
</UL>
<P><STRONG><a name="[de]"></a>[Anonymous Symbol]</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_hci.o(.rodata)
</UL>
<P><STRONG><a name="[df]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_hci.o(.rodata)
</UL>
<P><STRONG><a name="[e0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_hci.o(.rodata)
</UL>
<P><STRONG><a name="[dd]"></a>[Anonymous Symbol]</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_hci.o(.rodata)
</UL>
<P><STRONG><a name="[383]"></a>[Anonymous Symbol]</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ebh_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_evt_received_adapt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[386]"></a>[Anonymous Symbol]</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_cmd_send
</UL>

<P><STRONG><a name="[384]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ebh_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_hci_send_reg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[387]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ebh_l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_send
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_sche_once
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_received_adapt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_packets_completed_adapt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_disconnected_adapt
</UL>

<P><STRONG><a name="[388]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ebh_l2cap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_sche_once
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_disconnected_adapt
</UL>

<P><STRONG><a name="[38c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[38b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_send_cb_port
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2csig_received_adapt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_connection_parameter_update_req_proc
</UL>

<P><STRONG><a name="[389]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_connection_parameter_update_req_proc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[38a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ebh_l2cap_sig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_l2cap_conn_parameters_update_request
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3a4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3ad]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_bonded
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[39b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_request_adapt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_enc_ltk_response
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3a2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_st_send_random
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[397]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_ltk_response
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_irk_response
</UL>

<P><STRONG><a name="[39d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_enc_ltk_response
</UL>

<P><STRONG><a name="[3ab]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_ltk_rsponse_cb_port &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_rsponse_cb_port
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[3aa]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [Anonymous Symbol] &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[396]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_fsm_state
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_state
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_encrypt_changed_adapt
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_ltk_response
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_irk_response
</UL>

<P><STRONG><a name="[3b5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3b2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3ae]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_rand128
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_rand128
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[399]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_ltk_response
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_irk_response
</UL>

<P><STRONG><a name="[398]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_send_cb_port &rArr; ebh_l2cap_send
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_cb_port
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_ltk_response
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_irk_response
</UL>

<P><STRONG><a name="[3a1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_st_send_random
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3b6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[39c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_request_adapt
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_encrypt_changed_adapt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_enc_ltk_response
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3a9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_alg_c1 &rArr; ebh_smp_aes128 &rArr; drv_aes128_hw_encrypt &rArr; aes_hw_encrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_alg_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[3af]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_alg_c1 &rArr; ebh_smp_aes128 &rArr; drv_aes128_hw_encrypt &rArr; aes_hw_encrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_alg_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[395]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_received_adapt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_ltk_request_adapt
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_encrypt_changed_adapt
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_disconnected_adapt
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_connected_adapt
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pin_response
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pairing_response
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_ltk_response
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_irk_response
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3b3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3b8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3b9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ea]"></a>[Anonymous Symbol]</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_evt_ltk_info_response &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_ltk_info_response
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[39a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_done_adapt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_enc_ltk_response
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[e9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_evt_ltk_info_response &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_ltk_info_response
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[394]"></a>[Anonymous Symbol]</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_state
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_cb_port
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_bonded
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_reset
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_received_adapt
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pin_response
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_st_send_random
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_state_proc
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ec]"></a>[Anonymous Symbol]</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_evt_irk_info_response &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_irk_info_response
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[eb]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_evt_irk_info_response &rArr; [Anonymous Symbol] &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_irk_info_response
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[393]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_done_adapt
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pairing_response
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_ltk_response
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_irk_response
</UL>

<P><STRONG><a name="[392]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_pairing_response
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_ltk_response
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_bond_irk_response
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_state_proc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[e6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[f0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[e8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_state
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_bonded
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[f1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[ef]"></a>[Anonymous Symbol]</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_sc_public_key_valid
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[e7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_fsm_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[e4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[e5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[3bb]"></a>[Anonymous Symbol]</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ee]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_evt_security_request &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_security_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_set_fsm_peripheral &rArr; [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_set_fsm_peripheral
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp.o(.rodata)
</UL>
<P><STRONG><a name="[3a7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_evt_bond_ltk_request &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_bond_ltk_request
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_bond_irk_request
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_fsm_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[3a3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_evt_pin_request &rArr; ebh_smp_pin_response &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_evt_pin_request
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_rand_int
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[3a6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ebh_smp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_send_cb_port
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>

<P><STRONG><a name="[3bd]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ebh_smp_alg_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_alg_c1
</UL>

<P><STRONG><a name="[f3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_smp_dhkey_soft.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp_dhkey_soft.o(.rodata)
</UL>
<P><STRONG><a name="[f2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_smp_dhkey_soft.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp_dhkey_soft.o(.rodata)
</UL>
<P><STRONG><a name="[f5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_smp_dhkey_soft.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp_dhkey_soft.o(.rodata)
</UL>
<P><STRONG><a name="[f4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebh_smp_dhkey_soft.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp_dhkey_soft.o(.rodata)
</UL>
<P><STRONG><a name="[3bf]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ebh_smp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_set_fsm_peripheral
</UL>

<P><STRONG><a name="[3be]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ebh_smp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_mem_malloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_set_fsm_peripheral
</UL>

<P><STRONG><a name="[3c0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebh_smp_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_set_fsm_peripheral
</UL>

<P><STRONG><a name="[f7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ebh_smp_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[f6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ebh_smp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_fsm_state_proc &rArr; ebh_smp_ltk_request_cb_port &rArr; ebh_hci_cmd_send &rArr; [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_state_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[f8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ebh_smp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = [Anonymous Symbol] &rArr; ebh_smp_fsm_peripheral_legacy_state_proc &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_pin_request &rArr; ebh_smp_pin_response &rArr; [Anonymous Symbol] &rArr; ebh_smp_evt_bonded &rArr; ob_event_trigger_adapt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebh_smp_fsm_peripheral_legacy_state_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebh_smp_fsm.o(.rodata)
</UL>
<P><STRONG><a name="[3d2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3d9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3d7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3d6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3d1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3d8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3d5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3d0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3d3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3d4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hci_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[f9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.rodata)
</UL>
<P><STRONG><a name="[fd]"></a>[Anonymous Symbol]</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.rodata)
</UL>
<P><STRONG><a name="[fe]"></a>[Anonymous Symbol]</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.rodata)
</UL>
<P><STRONG><a name="[ff]"></a>[Anonymous Symbol]</STRONG> (Thumb, 432 bytes, Stack size 312 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.rodata)
</UL>
<P><STRONG><a name="[fc]"></a>[Anonymous Symbol]</STRONG> (Thumb, 350 bytes, Stack size 120 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.rodata)
</UL>
<P><STRONG><a name="[fa]"></a>[Anonymous Symbol]</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.rodata)
</UL>
<P><STRONG><a name="[fb]"></a>[Anonymous Symbol]</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.rodata)
</UL>
<P><STRONG><a name="[3cf]"></a>[Anonymous Symbol]</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hci_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3e9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hci_tl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3e7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, hci_tl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_unpack
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
</UL>

<P><STRONG><a name="[3db]"></a>[Anonymous Symbol]</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, hci_tl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_write
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_pack
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_free
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_le_evt_desc
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_evt_desc
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_check_host_available_nb_acl_packets
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_acl_packet_sent
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send
</UL>

<P><STRONG><a name="[3f1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, llb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_free
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_elt_get
</UL>

<P><STRONG><a name="[3ef]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_llcp_tx_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_free
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_rx_free
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_acl_tx_elt_get
</UL>

<P><STRONG><a name="[3ee]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_llcp_tx_free
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
</UL>

<P><STRONG><a name="[401]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_set
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>

<P><STRONG><a name="[3f8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3f6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, llc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_set
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_clear
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_pause_set
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_cleanup
</UL>

<P><STRONG><a name="[407]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_min_used_channels_ind_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_channel_map_ind_handler
</UL>

<P><STRONG><a name="[410]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_min_used_channels_ind_handler
</UL>

<P><STRONG><a name="[406]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_channel_map_ind_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_map_upd_cfm_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[40c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[64]"></a>[Anonymous Symbol]</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> llc_chmap_upd.o(.text)
<LI> llc_chmap_upd.o(.text)
</UL>
<P><STRONG><a name="[411]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ch_map_upd_ind_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_chnl_map_cmd_handler
</UL>

<P><STRONG><a name="[40b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_event_counter_get
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_ch_map_update
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_nb_good_le_channels
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_master_ch_map_get
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ch_map_upd_ind_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_map_upd_cfm_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[409]"></a>[Anonymous Symbol]</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, llc_chmap_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_exchange_del &rArr; llc_llcp_exchange_timer_set &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_ch_map_update
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_channel_map_ind_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_ch_map_upd_cfm_handler
</UL>

<P><STRONG><a name="[423]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_upd_cmd_handler
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[41a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llc_con_upd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_con_upd_ind_handler
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[41c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_exchange_timer_set &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[428]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_con_upd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_con_upd_ind_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_param_upd_cfm_handler
</UL>

<P><STRONG><a name="[417]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_con_upd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_param_upd_cfm_handler
</UL>

<P><STRONG><a name="[41d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llc_con_upd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[41e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_offset_get
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_set
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_del
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_plan_elt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_con_upd_ind_handler
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[425]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_con_upd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_con_upd_ind_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_move_cbk
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_neg_reply_cmd_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_upd_cmd_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_param_upd_cfm_handler
</UL>

<P><STRONG><a name="[41f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, llc_con_upd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_move_cbk
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_upd_cmd_handler
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[416]"></a>[Anonymous Symbol]</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_tx_len_update_for_intv
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_param_update
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_event_counter_get
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_plan_elt_get
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_con_upd_ind_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_rsp_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_param_upd_cfm_handler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[66]"></a>[Anonymous Symbol]</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 3]<UL><LI> llc_con_upd.o(.text)
<LI> llc_con_upd.o(.text)
<LI> llc_con_upd.o(.text)
</UL>
<P><STRONG><a name="[41b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [Anonymous Symbol] &rArr; obc_llt_params_future_req &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_offset_get
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_activity_offset_compute
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_req
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_check
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[418]"></a>[Anonymous Symbol]</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = [Anonymous Symbol] &rArr; llc_ll_reject_ind_pdu_send &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_tx_len_update_for_intv
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_param_update
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ll_reject_ind_pdu_send
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_update_ind_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_connection_param_req_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_neg_reply_cmd_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_param_upd_cfm_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[65]"></a>[Anonymous Symbol]</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llc_con_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_ll_reject_ind_pdu_send &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 2]<UL><LI> llc_con_upd.o(.text)
<LI> llc_con_upd.o(.text)
</UL>
<P><STRONG><a name="[436]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init_term_proc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect_cmd_handler
</UL>

<P><STRONG><a name="[431]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_disconnect.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_disconnect_ind_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_disc_ind_handler
</UL>

<P><STRONG><a name="[430]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_exchange_err_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_err_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_disconnect_ind_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_disc_ind_handler
</UL>

<P><STRONG><a name="[435]"></a>[Anonymous Symbol]</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_disconnect
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_state_set
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_pause_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_disconnect_ind_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[68]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 2]<UL><LI> llc_disconnect.o(.text)
<LI> llc_disconnect.o(.text)
</UL>
<P><STRONG><a name="[434]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_disconnect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_disconnect_ind_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect_cmd_handler
</UL>

<P><STRONG><a name="[67]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llc_disconnect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_disconnect.o(.text)
</UL>
<P><STRONG><a name="[43b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llc_dl_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_handler
</UL>

<P><STRONG><a name="[69]"></a>[Anonymous Symbol]</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, llc_dl_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_dl_upd.o(.text)
</UL>
<P><STRONG><a name="[438]"></a>[Anonymous Symbol]</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, llc_dl_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_dl_upd_ind_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_length_req_handler
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[43a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_dl_upd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_dl_upd_ind_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_handler
</UL>

<P><STRONG><a name="[439]"></a>[Anonymous Symbol]</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, llc_dl_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_len_update
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_dl_upd_ind_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_length_rsp_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[44e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_encrypt_ind_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_start_enc_rsp_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_start_enc_req_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause_enc_rsp_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_rsp_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_req_handler
</UL>

<P><STRONG><a name="[44c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_encrypt_ind_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_encrypt_ind_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_start_enc_rsp_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_start_enc_req_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause_enc_rsp_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_rsp_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_req_handler
</UL>

<P><STRONG><a name="[442]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = [Anonymous Symbol] &rArr; llc_disconnect &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[453]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_encrypt_ind_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_req_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
</UL>

<P><STRONG><a name="[454]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_start_enc_req_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_rsp_handler
</UL>

<P><STRONG><a name="[450]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_exchange_timer_pause_set &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_pause_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[452]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_exchange_timer_set &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[451]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_exchange_timer_set &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[446]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[444]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[43c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_start_enc_rsp_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_start_enc_req_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause_enc_req_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_rsp_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_req_handler
</UL>

<P><STRONG><a name="[43d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause_enc_req_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_req_handler
</UL>

<P><STRONG><a name="[449]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [Anonymous Symbol] &rArr; bbc_enc_key_load
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_enc_key_load
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[44b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[44d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_start_enc_rsp_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_start_enc_req_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause_enc_rsp_handler
</UL>

<P><STRONG><a name="[43e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_start_enc_rsp_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause_enc_rsp_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause_enc_req_handler
</UL>

<P><STRONG><a name="[455]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_encrypt_ind_handler
</UL>

<P><STRONG><a name="[440]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[457]"></a>[Anonymous Symbol]</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[445]"></a>[Anonymous Symbol]</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_encrypt_ind_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[443]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_encrypt_ind_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_encrypt_ind_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[447]"></a>[Anonymous Symbol]</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llp_aes128_encrypt
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[6c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_encrypt.o(.text)
</UL>
<P><STRONG><a name="[441]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[6b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_id_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_encrypt.o(.text)
</UL>
<P><STRONG><a name="[44a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[44f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_tx_enc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_rx_enc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_flow_set
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_state_set
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_pause_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_encrypt_ind_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_encrypt_ind_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_rsp_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_req_handler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[6d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_encrypt.o(.text)
</UL>
<P><STRONG><a name="[43f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_tx_enc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_rx_enc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_data_flow_set
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_evt_mask_check
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ll_reject_ind_pdu_send
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_state_set
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_pause_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_encrypt_ind_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_enc_req_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[6a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 2]<UL><LI> llc_encrypt.o(.text)
<LI> llc_encrypt.o(.text)
</UL>
<P><STRONG><a name="[458]"></a>[Anonymous Symbol]</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, llc_encrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llp_aes128_encrypt
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[45a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, llc_feat_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_slave_feature_req_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_feature_req_handler
</UL>

<P><STRONG><a name="[45c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, llc_feat_exch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[6e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, llc_feat_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_feat_exch.o(.text)
</UL>
<P><STRONG><a name="[45e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, llc_feat_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_feats_exch_ind_handler
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[45f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_feat_exch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_feats_exch_ind_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmd_handler
</UL>

<P><STRONG><a name="[45b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, llc_feat_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_features_get
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[45d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, llc_feat_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_features_get
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_feats_exch_ind_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_feature_rsp_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[461]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_tx_pwr_lvl_cmd_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_handler
</UL>

<P><STRONG><a name="[465]"></a>[Anonymous Symbol]</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llc_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_acl_tx_cfm_handler
</UL>

<P><STRONG><a name="[460]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_set_pref_slave_latency_cmd_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_set_pref_slave_evt_dur_cmd_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_tx_pwr_lvl_cmd_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_acl_rx_ind_handler
</UL>

<P><STRONG><a name="[466]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llc_llcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_llcp_rx_ind_handler
</UL>

<P><STRONG><a name="[467]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llc_llcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_exchange_err_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_err_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[122]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, llc_llcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_exchange_err_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[11e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, llc_llcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_exchange_err_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[118]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, llc_llcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_exchange_err_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_err_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.rodata)
</UL>
<P><STRONG><a name="[468]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_req_handler
</UL>

<P><STRONG><a name="[46e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_exchange_timer_set &rArr; [Anonymous Symbol] &rArr; obc_co_timer_set &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[46a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_phy_upd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[46f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llc_phy_upd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_update_ind_handler
</UL>

<P><STRONG><a name="[46b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [Anonymous Symbol] &rArr; bbc_tx_len_update_for_rate &rArr; [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_tx_len_update_for_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[472]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llc_phy_upd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_phy_upd_ind_handler
</UL>

<P><STRONG><a name="[46c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_phy_upd_ind_handler
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[470]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_phy_upd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_phy_upd_ind_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_phy_cmd_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_phy_cmd_handler
</UL>

<P><STRONG><a name="[471]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llc_phy_upd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_phy_cmd_handler
</UL>

<P><STRONG><a name="[46d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 720 bytes, Stack size 56 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_tx_len_update_for_rate
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_phys_update
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_event_counter_get
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_phy_upd_ind_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_phy_upd_cfm_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_update_ind_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_rsp_handler
</UL>

<P><STRONG><a name="[70]"></a>[Anonymous Symbol]</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 2]<UL><LI> llc_phy_upd.o(.text)
<LI> llc_phy_upd.o(.text)
</UL>
<P><STRONG><a name="[469]"></a>[Anonymous Symbol]</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_tx_len_update_for_rate
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbc_phys_update
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_phy_upd_cfm_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_update_ind_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_phy_req_handler
</UL>

<P><STRONG><a name="[6f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, llc_phy_upd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_phy_upd.o(.text)
</UL>
<P><STRONG><a name="[473]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = [Anonymous Symbol] &rArr; llc_disconnect &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[13e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, llc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_disconnect &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[13f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, llc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_disconnect &rArr; llc_llcp_state_set &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.rodata)
</UL>
<P><STRONG><a name="[475]"></a>[Anonymous Symbol]</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llc_ver_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ver_exch_ind_handler
</UL>

<P><STRONG><a name="[474]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llc_ver_exch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ver_exch_ind_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
</UL>

<P><STRONG><a name="[477]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, llc_ver_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_version_ind_handler
</UL>

<P><STRONG><a name="[476]"></a>[Anonymous Symbol]</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, llc_ver_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_timer_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_state_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_exchange_del
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_op_ver_exch_ind_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_version_ind_handler
</UL>

<P><STRONG><a name="[71]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, llc_ver_exch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llc_llcp_send &rArr; llc_llcp_tx_check &rArr; bbc_llcp_tx &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_ver_exch.o(.text)
</UL>
<P><STRONG><a name="[48c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_param_cmd_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_data_cmd_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_set_rand_addr_cmd_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rmv_adv_set_cmd_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_clear_adv_sets_cmd_handler
</UL>

<P><STRONG><a name="[499]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbs_req_ind_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bba_end_ind_handler
</UL>

<P><STRONG><a name="[497]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_en_cmd_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbp_end_ind_handler
</UL>

<P><STRONG><a name="[485]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[496]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_param_cmd_handler
</UL>

<P><STRONG><a name="[48a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol] &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[483]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_param_cmd_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_nb_supp_adv_sets_cmd_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_ch_tx_pw_cmd_handler
</UL>

<P><STRONG><a name="[48f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_param_cmd_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_data_cmd_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[484]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol] &rArr; llm_adv_hdl_to_id
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
</UL>

<P><STRONG><a name="[488]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[48d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_param_cmd_handler
</UL>

<P><STRONG><a name="[491]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rmv_adv_set_cmd_handler
</UL>

<P><STRONG><a name="[48b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[486]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[490]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_scan_rsp_data_cmd_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[495]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol] &rArr; llm_adv_hdl_to_id
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_adv_hdl_to_id
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_param_cmd_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[487]"></a>[Anonymous Symbol]</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[498]"></a>[Anonymous Symbol]</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llb_adv_tx_free
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rmv_adv_set_cmd_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_clear_adv_sets_cmd_handler
</UL>

<P><STRONG><a name="[493]"></a>[Anonymous Symbol]</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, llm_adv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_ble_pkt_dur_in_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_per_adv_en_cmd_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_ext_adv_en_cmd_handler
</UL>

<P><STRONG><a name="[49d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[49c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4a0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4a3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[49e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llm_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[49f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4a6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[14c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_acl_buf_size_set
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[14d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_host_nb_acl_pkts_complete
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[166]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[163]"></a>[Anonymous Symbol]</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_white_list_add
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_dev_list_search
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_dev_list_empty_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[168]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[162]"></a>[Anonymous Symbol]</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_white_list_rem
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[16d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llp_aes128_encrypt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[178]"></a>[Anonymous Symbol]</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = [Anonymous Symbol] &rArr; bbt_start &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[179]"></a>[Anonymous Symbol]</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = [Anonymous Symbol] &rArr; bbt_start &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[16e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[14f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[16c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[150]"></a>[Anonymous Symbol]</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_features_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[175]"></a>[Anonymous Symbol]</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[16b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[171]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[165]"></a>[Anonymous Symbol]</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[173]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[16f]"></a>[Anonymous Symbol]</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[170]"></a>[Anonymous Symbol]</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[161]"></a>[Anonymous Symbol]</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[167]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[164]"></a>[Anonymous Symbol]</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_white_list_rem
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_dev_list_search
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[176]"></a>[Anonymous Symbol]</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = [Anonymous Symbol] &rArr; bbt_start &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[16a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[17b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[14e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_evt_mask_set
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[160]"></a>[Anonymous Symbol]</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ch_map_update
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_nb_good_le_channels
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[151]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[169]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[17a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_stop
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[177]"></a>[Anonymous Symbol]</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = [Anonymous Symbol] &rArr; bbt_start &rArr; obc_llt_timer_insert &rArr; obc_co_list_extract_sublist
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_start
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[172]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[174]"></a>[Anonymous Symbol]</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[146]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[147]"></a>[Anonymous Symbol]</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[148]"></a>[Anonymous Symbol]</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[145]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[144]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = [Anonymous Symbol] &rArr; obc_reset &rArr; bbb_init &rArr; bbc_init &rArr; [Anonymous Symbol] &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_reset
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[14b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_acl_en
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[149]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_evt_mask_set
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[14a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, llm_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; llm_cmd_cmp_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_evt_mask_set
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.rodata)
</UL>
<P><STRONG><a name="[4a4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, llm_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4a7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, llm_hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[17c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, llm_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.rodata)
</UL>
<P><STRONG><a name="[4b5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4b4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4ae]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
</UL>

<P><STRONG><a name="[4ba]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_cur_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4b7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4c5]"></a>[Anonymous Symbol]</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4b0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4b1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4c4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4be]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4c2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [Anonymous Symbol] &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_erase
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_located
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_cur_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4af]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_erase &rArr; drv_sf_erase_sector &rArr; OUTLINED_FUNCTION_9 &rArr; drv_sf_write_end &rArr; drv_sf_wait_sr_no_busy &rArr; drv_sf_is_busy &rArr; drv_sf_read_sr
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4c1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 608 bytes, Stack size 80 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4b9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4ad]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4c0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 304 bytes, Stack size 96 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4b6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_read
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_located
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4bd]"></a>[Anonymous Symbol]</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>

<P><STRONG><a name="[4b2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4b3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4bf]"></a>[Anonymous Symbol]</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; drv_sf_write &rArr; drv_sf_write_page
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sf_write
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_sfs_located
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, obc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = [Anonymous Symbol] &rArr; nvds_del &rArr; nvds_put &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>[Anonymous Symbol]</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, obc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = [Anonymous Symbol] &rArr; nvds_get &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, obc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = [Anonymous Symbol] &rArr; nvds_put &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; drv_sf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obc.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, obc_co_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> obc_co_task.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>[Anonymous Symbol]</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, obc_co_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_free &rArr; cs_ble_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_push_back
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_clear
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_is_freed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obc_co_task.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, obc_co_timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> obc_co_timer.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>[Anonymous Symbol]</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, obc_co_timer.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> obc_co_timer.o(.text)
<LI> obc_co_timer.o(.text)
</UL>
<P><STRONG><a name="[4dc]"></a>[Anonymous Symbol]</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obc_co_timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_clear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4da]"></a>[Anonymous Symbol]</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, obc_co_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_time
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_set
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer_clear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[76]"></a>[Anonymous Symbol]</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, obc_co_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [Anonymous Symbol] &rArr; obc_co_msg_send_basic &rArr; obc_co_msg_alloc &rArr; cs_ble_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_send_basic
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_evt_clear
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_ble_mem_free
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_timer_cotimer_set
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obc_co_timer.o(.text)
</UL>
<P><STRONG><a name="[4e0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, obc_co_timer2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_time_32k_get
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_timer_cotimer2_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_timer2_isr
</UL>

<P><STRONG><a name="[4e3]"></a>[Anonymous Symbol]</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, obc_co_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_unpack
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_pack
</UL>

<P><STRONG><a name="[4e4]"></a>[Anonymous Symbol]</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, obc_co_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_unpack
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_pack
</UL>

<P><STRONG><a name="[4e2]"></a>[Anonymous Symbol]</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, obc_co_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_unpack
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_util_pack
</UL>

<P><STRONG><a name="[4e9]"></a>[Anonymous Symbol]</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, obc_hci_h4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [Anonymous Symbol] &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; [Anonymous Symbol] &rArr; obc_co_util_pack &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_co_msg_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_prevent_sleep_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
</UL>

<P><STRONG><a name="[4ea]"></a>[Anonymous Symbol]</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, obc_hci_h4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_prevent_sleep_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_hci_h4_receive_handler
</UL>

<P><STRONG><a name="[4ec]"></a>[Anonymous Symbol]</STRONG> (Thumb, 588 bytes, Stack size 56 bytes, obc_llt_params_future.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_time_32k_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_set
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_req
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_llt_params_future_check
</UL>

<P><STRONG><a name="[7c]"></a>[Anonymous Symbol]</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, obc_rf_asic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> obc_rf_asic.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>[Anonymous Symbol]</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, obc_rf_asic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> obc_rf_asic.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>[Anonymous Symbol]</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, obc_rf_asic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> obc_rf_asic.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, obc_rf_asic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> obc_rf_asic.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>[Anonymous Symbol]</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, obc_rf_asic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obc_rf_asic.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>[Anonymous Symbol]</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, obc_rf_asic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> obc_rf_asic.o(.text)
</UL>
<P><STRONG><a name="[4ef]"></a>[Anonymous Symbol]</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, obc_trc_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obc_trc_io_reset
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
